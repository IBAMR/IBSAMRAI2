dnl
dnl File:        configure.in
dnl Package:     SAMRAI build system
dnl Copyright:   (c) 1997-2008 Lawrence Livermore National Security, LLC
dnl Revision:    $LastChangedRevision: 3288 $
dnl Modified:    $LastChangedDate: 2009-06-18 14:43:43 -0700 (Thu, 18 Jun 2009) $
dnl Description: autoconfig configuration file
dnl

AC_INIT(COPYRIGHT)
AC_CONFIG_HEADER(include/SAMRAI_config.h:config/SAMRAI_config.h.in)
dnl
dnl Autoheader stuff
AH_TOP([

#ifndef INCLUDED_SAMRAI_CONFIG_H
#define INCLUDED_SAMRAI_CONFIG_H

#define SAMRAI_VERSION_MAJOR 2
#define SAMRAI_VERSION_MINOR 4
#define SAMRAI_VERSION_PATCHLEVEL 4
])
AH_BOTTOM([
/********************************************************************/
/********************* Hardwired defines ****************************/
/********************************************************************/

/*
 * Some compilers require cmath to be included before the regular
 * C math.h and stdlib.h headers are brought in, otherwise
 * the compiler will get conflicting definitions for the functions.
 */
#if defined(__xlC__)
#define REQUIRES_CMATH 1
#endif

#define STL_SSTREAM_HEADER_FILE <sstream>
#define LACKS_STRSTREAM

/*
 * A few things for the MSVC++ version.
 */
#ifdef _MSC_VER

/*
 * Move this bad stuff to the utility class, not POSIX
 */
#define drand48() ((double)rand()/(double)RAND_MAX)
/*
 * This is not correct, the range is wrong, need to find
 * a better solution
 */
#define mrand48() (rand())

/*
 * Some IEEE stuff is not under the normal names.
 *
 */
#define isnan _isnan

#endif

#endif
])

BTNG_AC_LOG_VAR(CONFIG_SHELL)

AC_CONFIG_AUX_DIR(config)

# Get system type.
AC_CANONICAL_SYSTEM
BTNG_AC_LOG_VAR(target_cpu target_vendor target_os)

dnl SAMRAI has some code specific for the Solaris operating system.
dnl (This is independent of what compiler is being used).
case "$host_os" in
  solaris*)
    AC_DEFINE(HOST_OS_IS_SOLARIS,1,Define if the host system is Solaris)
esac

dnl
dnl Define the macros that will set up optional packages and features.
dnl These macros will define shell variables that will be queried later
dnl in the installation script.
dnl

AC_ARG_ENABLE(char,
   [  --enable-char           build char patch datatypes])
AC_ARG_ENABLE(float,
   [  --enable-float          build float patch datatypes])
AC_ARG_ENABLE(bool,
   [  --enable-bool           build boolean patch datatypes])
AC_ARG_ENABLE(dcomplex,
   [  --enable-dcomplex       build double complex patch datatypes])

AC_ARG_ENABLE(vpath,
   [  --enable-vpath          assume a working VPATH in make (default except on IRIX64)])
AC_ARG_ENABLE(noxargs,
   [  --enable-noxargs        don't use xargs in build])
AC_ARG_ENABLE(shared,
   [  --enable-shared         build shared libraries (default is disabled)])
AC_ARG_ENABLE(xdr,
   [  --enable-xdr            build with XDR libraries (default is disabled)],
   ,
   enable_xdr="no"
   )
AC_ARG_ENABLE(developer_makefile,
   [  --enable-developer-makefile include extra targets in makefiles],
   ,
   enable_developer_makefile="no"
   )
AC_ARG_WITH(CC,
   [  --with-CC=ARG           manually set C compiler to ARG])
AC_ARG_WITH(CXX,
   [  --with-CXX=ARG          manually set C++ compiler to ARG])
AC_ARG_WITH(F77,
   [  --with-F77=ARG          manually set F77 to ARG])
AC_ARG_WITH(M4,
   [  --with-M4=ARG           manually set M4 to ARG])
AC_ARG_WITH(AR,
   [  --with-AR=ARG           manually set AR to ARG])
AC_ARG_WITH(vampir,
   [  --with-vampir[=dir]     compile with VAMPIR performance tracing])
AC_ARG_WITH(tau,
   [  --with-tau[=dir]        compile with TAU performance tracing])
AC_ARG_ENABLE(deprecated,
   [  --enable-deprecated     build with deprecated features (default is enabled)],
   ,
   enable_deprecated="yes"
   )

dnl
dnl Since we removed the all-CAPS options and replaced them with
dnl lowercase options, some people still use the all-CAPS options
dnl and get confused with the results (despite our best efforts to
dnl document this change).  We now abort the configuration to save
dnl these poor souls from themselves.
dnl
AC_ARG_WITH(MPI,, AC_MSG_ERROR([Obsolete option for MPI used!!
You should use lower-case.  Do 'configure --help' for help.]))
AC_ARG_WITH(HDF5,, AC_MSG_ERROR([Obsolete option for HDF5 used!!
You should use lower-case.  Do 'configure --help' for help.]))
AC_ARG_WITH(PETSC,, AC_MSG_ERROR([Obsolete option for PETSC used!!
You should use lower-case.  Do 'configure --help' for help.]))


dnl
dnl Initialize common macros to empty strings
dnl

C_FLAGS="$CFLAGS"
CXX_FLAGS="$CXXFLAGS"
F77_FLAGS="$FFLAGS"
LD_FLAGS="$LDFLAGS"
CXXLD_FLAGS="$LDFLAGS"
CPP_FLAGS="$CPPFLAGS"

INC_PATH=
LIB_PATH=
LIB_NAME=-lm

dnl LIBS is not used by SAMRAI's configure.in, but it is used by some
dnl of the supporting macros.
LIBS="$LIBS -lm"

LIB_SUFFIX=.a

dnl For debugging configure:
dnl LD_LIBRARY_PATH influences the configuration tests,
dnl so we want to know what it is.
BTNG_AC_LOG_VAR(LD_LIBRARY_PATH)

dnl
dnl Guess the machine architecture and set the variable ARCH
dnl
 
CASC_GUESS_ARCH
BTNG_AC_LOG_VAR(ARCH)

dnl
dnl Set up the C++ compiler.  
dnl

if test -n "$with_CXX"; then
   CXX=$with_CXX
else
   case "$host_os" in
     linux*) CCC=" g++ ";;
     solaris*) CCC=" g++ ";;
     osf*) CCC=" g++ ";;
     *) CCC=
   esac
fi
BTNG_AC_LOG_VAR(with_CXX CXX CCC, before running compiler search)
AC_PROG_CXX($CCC)
BTNG_AC_LOG_VAR(with_CXX CXX CCC, after running compiler search)

dnl
dnl Set up the C compiler.  This macro must come first and be followed
dnl AC_ISC_POSIX before other compiler tests are run.  See the autoconfig
dnl manual for details.
dnl

if test -n "$with_CC"; then
   CC=$with_CC
else
   AC_PROG_CC
fi

AC_ISC_POSIX


dnl
dnl Find ar for archiving
dnl

AC_CHECK_PROGS(AR, $with_AR ar,)
if test -z "$AR"; then
   AC_MSG_ERROR([ar archiver not found - specify with --with-m4=ARG])
fi

dnl
dnl Find m4, preferably the GNU version.
dnl

AC_CHECK_PROGS(M4, $with_M4 gm4 m4,)
if test -z "$M4"; then
   AC_MSG_ERROR([m4 preprocessor not found - specify with --with-M4=ARG])
fi


dnl
dnl Find install for installing 
dnl

AC_PROG_INSTALL
if test -z "$INSTALL"; then
   AC_MSG_ERROR([install not found])
fi

dnl
dnl Find mkdir for creating directories
dnl

AC_PROG_MKDIR_P
if test -z "$MKDIR_P"; then
   AC_MSG_ERROR([mkdir not found])
fi

dnl
dnl Determine what compilers are being used.
dnl

BTNG_INFO_CC_CXX_ID
# Warn user about unsupported compilers:
case $CXX_ID in
gnu|xlc|intel) ;;
*)
  AC_MSG_WARN([
You are using a C++ compiler unsupported by SAMRAI
You are on your own!
])
  ;;
esac

# Warn user about unusual compiler paths and LD_LIBRARY_PATH
for i in "$CXX" "$CC" ; do
  baseprog=`echo $i | awk '{print $1}'`
  prog=`which $baseprog`
  if echo "$prog" | grep -v '^/usr/bin/' > /dev/null; then
    AC_MSG_NOTICE([NOTIFICATION:

The compiler $i has an unusual path.
This may cause link problems if you don't also have the associated
library path in your LD_LIBRARY_PATH variable.  If you don't have
that path in your LD_LIBRARY_PATH, the compiler checks may not run
properly.  In that case, you may want to stop this process now, set
your LD_LIBRARY_PATH appropriately and run it.
])
  fi
done

dnl
dnl Check various C++ compiler features.
dnl

CASC_CXX_NAMESPACE
CASC_CXX_TEMPLATE_COMPLEX
CASC_CXX_SSTREAM
CASC_CXX_IOMANIP_LEFT
CASC_CXX_NEW_PLACEMENT_OPERATOR
CASC_CXX_MEMBER_FUNCTION_SPECIALIZATION
CASC_CXX_STATIC_DATA_INSTANTIATION
CASC_CXX_EXCEPTION_HANDLING
CASC_CXX_STANDARD_STATIC_DATA_SPECIALIZATION
if test "$casc_cv_cxx_have_standard_static_data_specialization" = "no"; then
   CASC_CXX_PRAGMA_STATIC_DATA_SPECIALIZATION
fi

CASC_CXX_CMATH

CASC_CXX_ISNAN_TEMPLATE

dnl
dnl Set special C++ compiler flags based on the architecture and the compiler
dnl name.  Set special template compilation options.  For warnings, set the
dnl maximum warning level that does not generate incorrect warning messages.
dnl

# By default make the object files depend on the template implementation files
# Turn this off for known cases that do not require it.

IMPLICIT_TEMPLATE_INSTANTIATION="no"
AC_ARG_ENABLE(implicit-template-instantiation,
[  --enable-implicit-template-instantiation
       Enable implicit template instantiation (disabled by default).
       Feature is at users' request.  We don't test it.],
IMPLICIT_TEMPLATE_INSTANTIATION="yes"
,
enable_implicit_template_instantiation=no
)

CXX_FLAGS_NO_TEMPLATE_INST=""
if test "${enable_implicit_template_instantiation}" = 'no'; then
case "$CXX_ID" in
   gnu)
      CXX_FLAGS_NO_TEMPLATE_INST="-fno-implicit-templates"
      ;;
   ibm)
      CXX_FLAGS_NO_TEMPLATE_INST="-qnotempinc"
      ;;
   intel)
      :
      ;;
   sunpro)
      CXX_FLAGS_NO_TEMPLATE_INST="-instances=explicit"
      ;;
esac
fi
AC_SUBST(CXX_FLAGS_NO_TEMPLATE_INST)
AC_SUBST(IMPLICIT_TEMPLATE_INSTANTIATION)

# For insure add -Zsl option for linking
case $CXX in 
   *insure*)
            LIB_NAME="$LIB_NAME -Zsl"
            ;;
esac

case $CXX_ID in
   gnu)
      CXX_FLAGS="-Wall $CXX_FLAGS"
      case $ARCH in
         IRIX64)
            CXX_FLAGS="-mabi=64 $CXX_FLAGS"
            ;;
	 solaris)
	    ;;
	 CYGWIN)
	    CXX_FLAGS="$CXX_FLAGS"
	    ;;
      esac
      ;;
   sunpro)
      CXX_FLAGS="-qrtti=all $CXX_FLAGS"
      case $ARCH in
         solaris | sun4)
            CXX_FLAGS="$CXX_FLAGS"
            CXX_FLAGS="+p $CXX_FLAGS"
            ;;
      esac
      ;;
   xlc)
      CXX_FLAGS="-qrtti=all $CXX_FLAGS"
      ;;
   intel)
      #  compiler requires template includes
      AC_DEFINE(INCLUDE_TEMPLATE_IMPLEMENTATION)
      case $ARCH in
         LINUX)
            CXX_FLAGS="$CXX_FLAGS -Wall -wd981 -wd383 -wd873 -wd1418 -wd279 -wd1682"
            ;;
      esac
      ;;
    insure)
      case $ARCH in
         solaris | sun4)
            CXX_FLAGS="+p $CXX_FLAGS"
            LIB_NAME="$LIB_NAME -Zsl"
            ;;
      esac
      ;;
    *)
      # By default include the template impls during compile
      AC_DEFINE(INCLUDE_TEMPLATE_IMPLEMENTATION)	
esac



dnl
dnl Set the compile mode flag for the kind of target to build
dnl

XARGS="xargs -n 150"
SAMRAI_TARGET="standard"
if test "$enable_noxargs" = "yes"; then
   SAMRAI_TARGET="noxargs"
fi

if test "$enable_shared" = "yes"; then
   SAMRAI_TARGET="shared"
   case $ARCH in
   Linux | LINUX | linux )
      C_FLAGS="-fPIC $C_FLAGS"
      CXX_FLAGS="-fPIC $CXX_FLAGS"
      CXXLD_FLAGS="-shared $LD_FLAGS"
      LIB_SUFFIX=.so
      ;;
   rs6000)
      CXXLD_FLAGS="-G $LD_FLAGS"
      LD_FLAGS="$LD_FLAGS -binitfini:poe_remote_main"
      LIB_SUFFIX=.so
      ;;
   *)
      C_FLAGS="-KPIC $C_FLAGS"
      CXX_FLAGS="-KPIC $CXX_FLAGS"
      CXXLD_FLAGS="-shared $LD_FLAGS"
      LIB_SUFFIX=.so
      ;;
   esac
fi



dnl
dnl Determine if there should be dependencies between
dnl object files and the template implementation files
dnl (the .C files as well as .h and .I files).
dnl
dnl By default make the object files depend on the template implementation files
dnl Turn this off for known cases that do not require it.
dnl
DEPENDS_ON_TEMPLATE_IMPLEMENTATION="yes"
case $CXX_ID in
   gnu)
      DEPENDS_ON_TEMPLATE_IMPLEMENTATION="no"
      ;;
   ibm)
      DEPENDS_ON_TEMPLATE_IMPLEMENTATION="no"
      ;;
   sunpro)
      DEPENDS_ON_TEMPLATE_IMPLEMENTATION="no"
      ;;
   intel)
      DEPENDS_ON_TEMPLATE_IMPLEMENTATION="no"
      #  compiler requires template includes
      AC_DEFINE([INCLUDE_TEMPLATE_IMPLEMENTATION],[1],[INCLUDE_TEMPLATE_IMPLEMENTATION])
      ;;
   *)
      # By default include the template impls during compile
      AC_DEFINE([INCLUDE_TEMPLATE_IMPLEMENTATION],[1],[INCLUDE_TEMPLATE_IMPLEMENTATION])
esac

dnl
dnl If implicit instantiation turned on then the standard requires that 
dnl implementation be present when compiling a template.
dnl
if test "${enable_implicit_template_instantiation}" = 'yes'; then
   AC_DEFINE([INCLUDE_TEMPLATE_IMPLEMENTATION],[1],[INCLUDE_TEMPLATE_IMPLEMENTATION])
   DEPENDS_ON_TEMPLATE_IMPLEMENTATION="yes"
fi
AC_SUBST(DEPENDS_ON_TEMPLATE_IMPLEMENTATION)

dnl
dnl Set the flag indicating if extra targets
dnl should be included in the Makefile.
dnl Normally used by developers but not users.
dnl
if test "$enable_developer_makefile" = "no"; then
   DEVELOPER_MAKEFILE="no"
else
   DEVELOPER_MAKEFILE="yes"
fi
AC_SUBST(DEVELOPER_MAKEFILE)



dnl
dnl Define optimize and debug switches.
dnl By default, set no optimization switches and set -g for debug switches.
dnl

AC_ARG_ENABLE(opt,
[  --enable-opt=STRING  Set compiler optimization switches.],
[case "$enable_opt" in
   no) opt_switches= ;;
   yes)
      case $CXX_ID in
         gnu)   opt_switches="-O2" ;;
         intel) opt_switches="-O3" ;;
         sunpro)
             case $ARCH in
                solaris | sun4) opt_switches="-fast" ;;
                *)              opt_switches="-O" ;;
             esac
         ;;
      esac ;;
   *) opt_switches="$enable_opt" ;;
esac],
opt_switches=)

if test -n "$opt_switches" ; then
   C_FLAGS="$opt_switches $C_FLAGS"
   CXX_FLAGS="$opt_switches $CXX_FLAGS"
   F77_FLAGS="$opt_switches $F77_FLAGS"
fi

AC_ARG_ENABLE(debug,
[  --enable-debug=STRING  Set compiler debug switches.],
[case "$enable_debug" in
   no) debug_switches= ;;
   yes)
      case $CXX_ID in
         *)   debug_switches="-g" ;;
      esac ;;
   *) debug_switches="$enable_debug" ;;
esac
case "$enable_debug" in
   no) ;;
   *)
   AC_DEFINE([DEBUG_NO_INLINE],[1],[Disable inlining for debug mode])
   AC_DEFINE([DEBUG_CHECK_ASSERTIONS],[1],[Enable assertion checking for debug mode])
   AC_DEFINE([DEBUG_INITIALIZE_UNDEFINED],[1],[Initialize new memory to undefined values in debug mode])
esac],
debug_switches=-g)


if test -n "$debug_switches" ; then
   C_FLAGS="$debug_switches $C_FLAGS"
   CXX_FLAGS="$debug_switches $CXX_FLAGS"
   F77_FLAGS="$debug_switches $F77_FLAGS"
fi

BTNG_AC_LOG_VAR(debug_switches opt_switches)

dnl
dnl Set the optional classes to build
dnl

SAMRAI_OPTIONAL_LIBS=""
SAMRAI_ENABLE_SPECIAL="no"
if test "$enable_char" = "yes"; then
   SAMRAI_OPTIONAL_LIBS="libchar"
   AC_DEFINE([HAVE_CHAR],[1],[Build SAMRAI with instantiated char datatypes])
fi

if test "$enable_bool" = "yes"; then
   SAMRAI_OPTIONAL_LIBS="libbool $SAMRAI_OPTIONAL_LIBS" 
   SAMRAI_ENABLE_SPECIAL="yes"
   AC_DEFINE([HAVE_BOOL],[1],[Build SAMRAI with instantiated bool datatypes])
fi

if test "$enable_float" = "yes"; then
   SAMRAI_OPTIONAL_LIBS="libfloat $SAMRAI_OPTIONAL_LIBS" 
   SAMRAI_ENABLE_SPECIAL="yes"
   AC_DEFINE([HAVE_FLOAT],[1],[Build SAMRAI with instantiated float datatypes])
fi

if test "$enable_dcomplex" = "yes"; then
   SAMRAI_OPTIONAL_LIBS="libdcomplex $SAMRAI_OPTIONAL_LIBS" 
   SAMRAI_ENABLE_SPECIAL="yes"
   AC_DEFINE([HAVE_DCOMPLEX],[1],[Build SAMRAI with instantiated double-complex datatypes])
fi
AC_SUBST(SAMRAI_OPTIONAL_LIBS)
AC_SUBST(SAMRAI_ENABLE_SPECIAL)


dnl
dnl Set up the Fortran compiler.  Look for special Fortran compilers on
dnl AIX machines.
dnl

if test -n "$with_F77"; then
   dnl If user specifies full path then don't search in path
   if test -f $with_F77; then
      F77=$with_F77
   else
      AC_CHECK_PROGS(F77, $with_F77)
   fi
else
   if test -z "$F77"; then
      AC_CHECK_PROGS(F77, f77 g77 xlf f2c)
   else
      dnl If F77 was specified then see if it is a full path
      dnl or just the prog name in users PATH
      if test -f $F77; then
	F77=$F77
      else
	AC_CHECK_PROGS(F77, $F77)
      fi
   fi
fi

test -z "$F77" && AC_MSG_ERROR([no acceptable Fortran found in $PATH])
BTNG_AC_LOG_VAR(F77)

# Warn user about unusual compiler paths and LD_LIBRARY_PATH
for i in `which $F77` ; do
  if echo "$i" | grep -v '^/usr/bin/' > /dev/null; then
    AC_MSG_NOTICE([NOTIFICATION:

The compiler $i has an unusual path.
This may cause link problems if you don't also have the associated
library path in your LD_LIBRARY_PATH variable.  If you don't have
that path in your LD_LIBRARY_PATH, the compiler checks may not run
properly.  In that case, you may want to stop this process now, set
your LD_LIBRARY_PATH appropriately and run it.
])
  fi
done


if test "$ac_cv_prog_g77" = "yes"; then
   F77_FLAGS="-Wall -Wimplicit -Wunused $F77_FLAGS"
else
   case $ARCH in
      sun4 | solaris)
         F77_FLAGS="-u $F77_FLAGS"
         ;;
      rs6000)
         F77_FLAGS="-u -qextname $F77_FLAGS"
         ;;
      IRIX64)
         F77_FLAGS="-64 $F77_FLAGS"
         ;;
   esac
fi

dnl
dnl Set up the Fortran libraries.
dnl

case $ARCH in
   IRIX64)
      SAVE_F77="$F77"
      F77="$F77 -64"
      CASC_FIND_F77LIBS
      F77="$SAVE_F77"
      ;;
   ipsc2)
      dnl Manually set stuff for ASCI Red.  This is a hack here
      dnl but did not want to waste more time on a singleton machine
      F77LIBFLAGS="-lpgftnrtl_cgr -lcmplx -lrpc"
      ;;
   rs6000)
      case $F77 in
         *mpxlf*)
	     F77LIBFLAGS="-lxlf90 -lessl $F77LIBFLAGS"
	     ;;
      esac
      ;;
   LINUX)
      CASC_FIND_F77LIBS
      case $F77 in
         *ifc*)
	     F77LIBFLAGS="-lPEPCF90 $F77LIBFLAGS"
	     ;;
      esac
      ;;
   *)
      CASC_FIND_F77LIBS
      ;;
esac
LIB_NAME="$F77LIBFLAGS $LIB_NAME"
BTNG_AC_LOG_VAR(F77LIBFLAGS, after appending F77LIBFLAGS to LIB_NAME)

dnl
dnl Find the correct way to mangle fortran function names
dnl so they can be called from C.  Calling this macro puts
dnl certain #define statements in the config.h file to choose
dnl the correct mangling.
dnl A fortran subroutine named dothis can be called from C using
dnl    F77_FUNC(dothis,DOTHIS)
dnl A fortran subroutine named do_this can be called from C using
dnl    F77_FUNC_(do_this,DO_THIS)
dnl
AC_F77_WRAPPERS

dnl
dnl When user specifies, override the results from AC_F77_WRAPPERS.
dnl This is a total kludge for fixing a problem on Purple.
dnl It corrects the results of the name mangling test in
dnl AC_F77_WRAPPERS, where the mangling results differs
dnl depending on whether direct compiles or with intervening
dnl library (.a) file.  This is a total kludge!!!! but it's
dnl too hard to improve the test or fix the strange behavior.
dnl
AC_MSG_CHECKING(whether to kludge override fortran name mangling results)
AC_ARG_ENABLE([fortran-mangling-override],
[  --enable-fortran-mangling-override Kludgey FORTRAN name mangling fix.
                                      Not for general use.],
[case "$enable_fortran_mangling_override" in
  [yes)]
  AC_MSG_RESULT(yes)
  sed -e ['s/^\(#define F77_FUNC.\{1,\}\)/\1 ## _/'] confdefs.h > confdefs1.h
  mv confdefs1.h confdefs.h
esac],
AC_MSG_RESULT(no))

dnl
dnl Find the X11 include directory, library directory, and associated
dnl libraries.
dnl

if test "${with_x+set}" = set; then
   AC_PATH_XTRA
   if test "yes" = "$no_x"; then
      AC_MSG_NOTICE([NOTIFICATION: SAMRAI configured without the X11 library])
      AC_DEFINE([LACKS_X11],[1],[X11 library is missing])
   else
      AC_DEFINE([HAVE_X11],[1],[X11 library is present])
      X_LIBS=`echo $X_LIBS | sed 's/-R\//-R \//'`
      if test -n "$x_includes"; then
         INC_PATH="-I$x_includes $INC_PATH"
      fi
      LIB_PATH="$X_LIBS $LIB_PATH"
      LIB_NAME="$X_PRE_LIBS -lX11 $X_EXTRA_LIBS $LIB_NAME"
   fi
else
   AC_MSG_NOTICE([NOTIFICATION: SAMRAI configured without the X11 library])
   AC_DEFINE([LACKS_X11],[1],[X11 library is missing])
fi

dnl
dnl If vpath is working then we don't need to include SRCDIR
dnl in the compiler invocation targets.  By default, we assume
dnl that vpath works properly (except on IRIX64).  If this is
dnl not the case, then the user must specify --disable-vpath
dnl in the configuration.
dnl

case $ARCH in
   IRIX64)
      if test -z "$enable_vpath"; then
         enable_vpath=no
      fi
      ;;
   *)
      if test -z "$enable_vpath"; then
         enable_vpath=yes
      fi
      ;;
esac

if test "$enable_vpath" = "no"; then
   SRCDIR_COMPILE_PREFIX="\$(SRCDIR)/"
else
   SRCDIR_COMPILE_PREFIX=""
fi


dnl
dnl Set DOXYGEN_BIN to the doxygen binary.
dnl

BTNG_PATH_PROG(DOXYGEN_BIN,doxygen)
BTNG_AC_LOG_VAR(DOXYGEN_BIN)

dnl
dnl Set DOT_PATH to the directory of the dot binary, for use with doxygen.
dnl

AC_ARG_WITH(dot-dir,
[  --with-dot-dir=DIR     Specify bin directory where dot binaries live.],,
unset with_dot_dir)
if   test "${with_dot_dir}" = yes || test ! "${with_dot_dir+set}" = set; then
  # Find dot path, and use if found
  DOT_PATH=`which dot`
  if test -z "${DOT_PATH}"; then
    unset DOT_PATH
    HAVE_DOT=NO
  else
    [DOT_PATH=`echo $DOT_PATH | sed 's!/[^/]\{1,\}$!!']`
    HAVE_DOT=YES
  fi
elif test "${with_dot_dir}" = no; then
  # Disable dot.
  unset DOT_PATH
  HAVE_DOT=NO
else
  # Make sure valid path is specified.  Enable dot.
  if test ! -d ${with_dot_dir}; then
     AC_MSG_WARN([
Invalid path given for dot executable: ${with_dot_dir}.
Path does not exist.
You can expect doxygen documentation generation to not work properly.
]);
  fi
  DOT_PATH=${with_dot_dir}
  HAVE_DOT=YES
fi
BTNG_AC_LOG_VAR(with_dot_dir HAVE_DOT DOT_PATH)
AC_SUBST(HAVE_DOT)
AC_SUBST(DOT_PATH)

dnl BTNG_PATH_PROG(DOT_BIN,dot)
dnl BTNG_AC_LOG_VAR(DOT_BIN)
dnl AC_SUBST(DOT_BIN)
dnl # Doxygen wants to know if we have the dot binary.
dnl HAVE_DOT=NO;  test "${DOT_BIN+set}" = set && HAVE_DOT=YES
dnl AC_SUBST(HAVE_DOT)

dnl
dnl Set the directory for doxygen documentation.
dnl
AC_ARG_WITH(dox-output-dir,
[  --with-dox-output-dir=DIR
			Specify full where Doxygen documentation is generated.
			Default is the docs directory in the compile tree.])
if test -n "$with_dox_output_dir"; then
  if echo "$with_dox_output_dir" | grep -v '^/' ; then
    AC_MSG_ERROR(You must give a full path with --with-dox-output-dir=DIR)
  fi
  dox_output_dir="$with_dox_output_dir"
  # Make sure dox_output_dir ends with / so because the doxygen
  # configuration files simply append a subdirectory name.
  [dox_output_dir="`echo $dox_output_dir | sed 's:\([^/]\)$:\1/:'`"]
fi
AC_SUBST(dox_output_dir)

dnl
dnl Set SAMRAI_PERL to the perl binary for use in doxygen.
dnl

BTNG_PATH_PROG(SAMRAI_PERL,perl)
BTNG_AC_LOG_VAR(SAMRAI_PERL)

dnl
dnl Whether restrict key word works.
dnl
BTNG_AC_LOG(begin stringize)
AC_C_STRINGIZE
BTNG_AC_LOG(end stringize)

dnl
dnl Whether restrict key word works.
dnl
BTNG_C_RESTRICT

dnl
dnl Look for the iomanip header file name.
dnl
BTNG_IOMANIP_HEADER_FILENAME

dnl
dnl Look for the iostream header file name.
dnl
BTNG_IOSTREAM_HEADER_FILENAME

dnl
dnl Look for the strstream header file name.
dnl
BTNG_STL_SSTREAM_HEADER_FILENAME
dnl
dnl Deal with broken ostringstream type.
dnl Some platforms have ostringstream and some ostrstream.
dnl We need to know which is broken.
dnl
AC_LANG_PUSH([C++])
BTNG_TYPE_NAMESPACE
AC_MSG_CHECKING(type ostringstream)
AC_TRY_COMPILE([#include STL_SSTREAM_HEADER_FILE
#ifndef NAMESPACE_IS_BROKEN
using namespace std;
#endif
], [ostringstream oss; oss << 10;]
,
AC_MSG_RESULT(ok),
AC_MSG_RESULT(broken)
AC_DEFINE(OSTRINGSTREAM_TYPE_IS_BROKEN,1,The type ostringstream is broken)
)
AC_MSG_CHECKING(type ostrstream)
AC_TRY_COMPILE([#include STL_SSTREAM_HEADER_FILE
#ifndef NAMESPACE_IS_BROKEN
using namespace std;
#endif
], [ostrstream oss; oss << 10;]
,
AC_MSG_RESULT(ok),
AC_MSG_RESULT(broken)
AC_DEFINE(OSTRSTREAM_TYPE_IS_BROKEN,1,The type ostrstream is broken)
)
AC_LANG_POP([C++])

dnl
dnl Check if malloc.h is present
dnl
AC_CHECK_HEADER(malloc.h,
        AC_DEFINE([HAVE_MALLOC_H],[1],[HAVE_MALLOC_H])
        )

dnl
dnl Checking for mallinfo
dnl
AC_MSG_CHECKING(for mallinfo)
AC_TRY_COMPILE([#include <malloc.h>], void *x=mallinfo,
  AC_DEFINE(HAVE_MALLINFO, 1, Define if you have the 'mallinfo' function.)
  AC_MSG_RESULT(yes),
  AC_MSG_RESULT(no)
)

CASC_CXX_ISNAN

dnl
dnl Set dl library on Linux.
dnl Linux has a dynamic load library, and some software (PETSc-2.1.3
dnl for example) require it.  When configuring on Linux, if the
dnl dl library is found, use it.
dnl

BTNG_SUPPORT_DL(1)
if test "${dl_PREFIX+set}" = set; then
  if echo $target_os | grep '^linux' > /dev/null \
    && test ! "${dl_LIBS+set}" = set; then
    AC_MSG_WARN([
	The Linux dynamic loading library is not found.
	This may cause problems with some libraries that use it.
	In particular, we have seen that PETSc may use this library.
    ])
  fi
  if test "${dl_LIBS}"; then
    LIBS="$dl_LIBS $LIBS"
    SAMRAI_SPLIT_LIBS_STRING(dl_LIBS,dl_LIB_PATH,dl_LIB_NAME)
    LIB_PATH="$dl_LIB_PATH $LIB_PATH"
    LIB_NAME="$dl_LIB_NAME $LIB_NAME"
    INC_PATH="$dl_INCLUDES $INC_PATH"
  fi
fi



dnl dnl
dnl dnl Set up the Fortran libraries.
dnl dnl
AC_F77_LIBRARY_LDFLAGS
SAMRAI_SPLIT_LIBS_STRING(FLIBS,FLIBS_PATH,FLIBS_NAME)
LIB_NAME="${LIB_NAME} ${FLIBS_NAME}"
LIB_PATH="${LIB_PATH} ${FLIBS_PATH}"
BTNG_AC_LOG_VAR([FLIBS FLIBS_PATH FLIBS_NAME], [after using ac_f77_library_ldflags])
dnl dnl
dnl dnl Set fortran library.
dnl dnl
dnl BTNG_AC_LOG_VAR(fortran_LIBS fortran_LIB_PATH fortran_LIB_NAME LIB_PATH LIB_NAME, before getting fortran libs)
dnl BTNG_SUPPORT_FORTRAN_FROM_C(1)
dnl if test -n "$fortran_LIBS" ; then
dnl   LIBS="$LIBS $fortran_LIBS"
dnl   SAMRAI_SPLIT_LIBS_STRING(fortran_LIBS,fortran_LIB_PATH,fortran_LIB_NAME)
dnl   LIB_PATH="$fortran_LIB_PATH $LIB_PATH"
dnl   LIB_NAME="$fortran_LIB_NAME $LIB_NAME"
dnl fi
dnl BTNG_AC_LOG_VAR(fortran_LIBS fortran_LIB_PATH fortran_LIB_NAME LIB_PATH LIB_NAME, after getting fortran libs)


dnl
dnl If the nsl library can be found, use it.
dnl

BTNG_SUPPORT_NSL(1)
if test "${nsl_PREFIX+set}" = set; then
  LIBS="$nsl_LIBS $LIBS"
  SAMRAI_SPLIT_LIBS_STRING(nsl_LIBS,nsl_LIB_PATH,nsl_LIB_NAME)
  LIB_PATH="$nsl_LIB_PATH $LIB_PATH"
  LIB_NAME="$nsl_LIB_NAME $LIB_NAME"
  INC_PATH="$nsl_INCLUDES $INC_PATH"
fi


dnl
dnl If the z compression library can be found, use it.
dnl

BTNG_SUPPORT_LIBZ(1)
if test "${libz_PREFIX+set}" = set; then
  LIBS="$libz_LIBS $LIBS"
  SAMRAI_SPLIT_LIBS_STRING(libz_LIBS,libz_LIB_PATH,libz_LIB_NAME)
  LIB_PATH="$libz_LIB_PATH $LIB_PATH"
  LIB_NAME="$libz_LIB_NAME $LIB_NAME"
  INC_PATH="$libz_INCLUDES $INC_PATH"
fi



dnl
dnl Set variables for blaslapack support
dnl
BTNG_SUPPORT_BLASLAPACK
if test "${blaslapack_PREFIX+set}" = set ||
   test "${blaslapack_INCLUDES+set}" = set ||
   test "${blaslapack_LIBS+set}" = set ; then
  LIBS="$blaslapack_LIBS $LIBS"
  SAMRAI_SPLIT_LIBS_STRING(blaslapack_LIBS,blaslapack_LIB_PATH,blaslapack_LIB_NAME)
  LIB_PATH="$blaslapack_LIB_PATH $LIB_PATH"
  LIB_NAME="$blaslapack_LIB_NAME $LIB_NAME"
  INC_PATH="$blaslapack_INCLUDES $INC_PATH"
  AC_DEFINE(HAVE_BLASLAPACK,1,BLASLAPACK library is available so use it)
fi
BTNG_AC_LOG_VAR(blaslapack_LIB_PATH blaslapack_LIB_NAME LIB_PATH LIB_NAME)

dnl
dnl If MPI is requested, then determine the proper path using CASC_FIND_MPI.
dnl Note:  I added CASC_FIND_MPI_ALPHA for special case with compass cluster.
dnl For more information, see code comments for macro in casc_mpi.m4.  AMW 9/00
dnl

AC_ARG_WITH(mpi,[  --without-mpi	Compile without MPI library.])
if test "$with_mpi" = no; then
   AC_MSG_NOTICE([NOTIFICATION: SAMRAI configured without the MPI library])
   AC_DEFINE([LACKS_MPI],[1],[MPI library is missing])
else

   case $ARCH in
      alpha)
         CASC_FIND_MPI_ALPHA
      ;;
      *)
         CASC_FIND_MPI
      ;;
   esac

   if test -n "$MPIINCLUDE" -o -n "$MPILIBS" -o -n "$MPILIBDIRS"; then
      with_mpi=yes
      AC_DEFINE([HAVE_MPI],[1],[MPI library is present])
      INC_PATH="$MPIINCLUDE $INC_PATH"
      LIB_NAME="$MPILIBS $LIB_NAME"
      LIB_PATH="$MPILIBDIRS $LIB_PATH"
      BTNG_AC_LOG_VAR(MPIINCLUDE MPILIBS MPILIBDIRS, After successfully finding MPI using casc_find_mpi)
   fi
fi
BTNG_AC_LOG_VAR(with_mpi)



dnl
dnl Set variables for hdf5 support
dnl
CASC_SUPPORT_HDF5
if test "${hdf5_PREFIX+set}" = set; then
  LIBS="$hdf5_LIBS $LIBS"
  SAMRAI_SPLIT_LIBS_STRING(hdf5_LIBS,hdf5_LIB_PATH,hdf5_LIB_NAME)
  LIB_PATH="$hdf5_LIB_PATH $LIB_PATH"
  LIB_NAME="$hdf5_LIB_NAME $LIB_NAME"
  INC_PATH="$hdf5_INCLUDES $INC_PATH"
  AC_DEFINE(HAVE_HDF5,1,HDF5 library is available so use it)
else
  if test ! "$with_hdf5" = no; then
   AC_MSG_ERROR([HDF5 not found - either specify a valid location via --with-hdf5=PATH or if you do not have HDF5 use --without-hdf5.  Note: if you do not have HDF5 you will not be able to use SAMRAI's VisIt Data writer and the VisIt visualization package.])
  fi
fi
BTNG_AC_LOG_VAR(
[hdf5_INCLUDES INC_PATH hdf5_LIB_PATH hdf5_LIB_NAME LIB_PATH LIB_NAME])

dnl
dnl Silo support
dnl
CASC_SUPPORT_SILO
if test "${silo_PREFIX+set}" = set; then
  LIBS="$silo_LIBS $LIBS"
  SAMRAI_SPLIT_LIBS_STRING(silo_LIBS,silo_LIB_PATH,silo_LIB_NAME)
  LIB_PATH="$silo_LIB_PATH $LIB_PATH"
  LIB_NAME="$silo_LIB_NAME $LIB_NAME"
  INC_PATH="$silo_INCLUDES $INC_PATH"
  AC_DEFINE([HAVE_SILO],[1],[SILO library is available so use it])
fi
BTNG_AC_LOG_VAR(
[silo_INCLUDES INC_PATH silo_LIB_PATH silo_LIB_NAME LIB_PATH LIB_NAME])

dnl
dnl Set variables for hypre support.
dnl
BTNG_SUPPORT_HYPRE
if test "${hypre_PREFIX+set}" = set; then
  LIBS="$hypre_LIBS $LIBS"
  SAMRAI_SPLIT_LIBS_STRING(hypre_LIBS,hypre_LIB_PATH,hypre_LIB_NAME)
  LIB_PATH="$hypre_LIB_PATH $LIB_PATH"
  LIB_NAME="$hypre_LIB_NAME $LIB_NAME"
  INC_PATH="$hypre_INCLUDES $INC_PATH"
  AC_DEFINE(HAVE_HYPRE,1,HYPRE library is available so use it)
  AC_MSG_CHECKING(whether HYPRE was compiled with MPI)
  # Check how HYPRe was compiled.
  BTNG_AC_LOG_VAR(hypre_PARALLELISM)
  if test "$hypre_PARALLELISM" = 'parallel'; then
     AC_MSG_RESULT(yes)
     if test "$with_mpi" = no ; then
        AC_MSG_ERROR(sequential SAMRAI cannot call parallel HYPRE)
     fi
  elif test "$hypre_PARALLELISM" = 'serial'; then
     AC_MSG_RESULT(no)
     AC_DEFINE([HYPRE_SEQUENTIAL],[1],[Hypre library is configured for sequential mode])
     if test "$with_mpi" != no ; then
        AC_MSG_ERROR(parallel SAMRAI cannot call sequential HYPRE)
     fi
  else
     AC_MSG_WARN(Cannot determine if hypre was compiled for serial or parallel)
  fi
else
  AC_MSG_NOTICE([NOTIFICATION: SAMRAI configured without the HYPRE library])
  AC_DEFINE([LACKS_HYPRE],[1],[Hypre library is missing])
fi

dnl
dnl Set variables for superlu support.
dnl
AC_ARG_WITH(superlu-lib,
[  --with-superlu-lib=LIB     LIB is the library archive file for the
                             SuperLU package.],
,with_superlu_lib='no')

if test "${with_superlu_lib}" = yes; then
  superlu_LIB=
elif test "${with_superlu_lib}" = no; then
  superlu_LIB=
else
  superlu_LIB="${with_superlu_lib}"
fi
LIB_NAME="$superlu_LIB $LIB_NAME"

dnl
dnl Set variables for spooles support.
dnl
BTNG_SUPPORT_SPOOLES
if test "${spooles_PREFIX+set}" = set; then
  LIBS="$spooles_LIBS $LIBS"
  SAMRAI_SPLIT_LIBS_STRING(spooles_LIBS,spooles_LIB_PATH,spooles_LIB_NAME)
  LIB_PATH="$spooles_LIB_PATH $LIB_PATH"
  LIB_NAME="$spooles_LIB_NAME $LIB_NAME"
  INC_PATH="$spooles_INCLUDES $INC_PATH"
fi



dnl
dnl Set variables for petsc support.
dnl
BTNG_SUPPORT_PETSC
if test "${PETSC_DIR+set}" = set; then
  LIBS="$petsc_LIBS $LIBS"
  SAMRAI_SPLIT_LIBS_STRING(petsc_LIBS,petsc_LIB_PATH,petsc_LIB_NAME)
  LIB_PATH="$petsc_LIB_PATH $LIB_PATH"
  LIB_NAME="$petsc_LIB_NAME $LIB_NAME"
  INC_PATH="$petsc_INCLUDES $INC_PATH"
  AC_DEFINE(HAVE_PETSC,1,PETSC library is available so use it)
  if test $PETSC_VERSION_MAJOR -ne 2 || \
     test $PETSC_VERSION_MINOR -ne 3 || \
     test $PETSC_VERSION_SUBMINOR -ne 3 ; then
     AC_MSG_WARN([
SAMRAI requires PETSc-2.3.3.  You have specified version $PETSC_VERSION_MAJOR.$PETSC_VERSION_MINOR.$PETSC_VERSION_SUBMINOR
which may not work properly!
])
  fi
fi





dnl
dnl The following are hacks for specific architectures.  We are not proud
dnl of these tests, and they should be changed to macros in the future.
dnl
dnl Check for broken XDR headers on linux and CYGWIN systems.
dnl AIX requires both _ALL_SOURCE and _POWER for some system files.
dnl

case $ARCH in
   Linux | LINUX | linux | CYGWIN )
      AC_DEFINE([LACKS_PROPER_XDR_HEADER],[1],[LACKS_PROPER_XDR_HEADER])
      ;;
   rs6000)
      dnl
      dnl Defining ALL_SOURCE causes ASC Purple mpxlC and mpCC
      dnl to complain that it is already defined as something else.
      dnl I don't why it is required.  --BTNG
      dnl AC_DEFINE([_ALL_SOURCE],[1],[Kludgey thing inserted by configure.in])
      dnl
      AC_DEFINE([_POWER],[1],[Kludgey thing inserted by configure.in])
      ;;
   *)
      ;;
esac


dnl
dnl Test if compiling with XDR support
dnl
if test "$enable_xdr" = "yes"; then

   AC_DEFINE(HAVE_XDR,1,"Compiling with XDR support")	  

   dnl
   dnl For cygwin need to add rpc libraries to get XDR.
   dnl

   case $ARCH in
      CYGWIN)
         case $CXX in
            *g++)     
	       LIB_NAME="$LIB_NAME -lrpc"
              ;;
         esac
         ;;	
   esac
fi

dnl
dnl Test if compiling with deprecated 
dnl
if test "$enable_deprecated" = "yes"; then
   AC_DEFINE(INCLUDE_DEPRECATED,2,"Compiling with deprecated features")
else
   AC_DEFINE(INCLUDE_DEPRECATED,9999999,"Compiling without deprecated features")
fi


dnl
dnl If Sundials is requested, then set up the Sundials libraries and include paths.
dnl

AC_ARG_WITH(sundials,
[  --with-sundials=PATH	Use the Sundials solver package
			and specify where it is.],
,with_sundials='no')

if test "$with_sundials" = no; then
   AC_MSG_NOTICE([NOTIFICATION: SAMRAI configured without the Sundials library])
   AC_DEFINE([LACKS_SUNDIALS],[1],[LACKS_SUNDIALS])
else
   sundials_dir="$with_sundials"
   if test ! -d "$sundials_dir" ; then
     AC_MSG_ERROR(
       [You MUST specify an existing path when using --with-sundials=PATH])
   fi
   AC_DEFINE([HAVE_SUNDIALS],[1],[HAVE_SUNDIALS])
   LIB_PATH="$LIB_PATH -L$sundials_dir/lib"
   LIB_NAME="$LIB_NAME -lsundials_cvode -lsundials_kinsol"
   INC_PATH="-I$sundials_dir/include $INC_PATH"
fi
AC_SUBST(SUNDIALS_C_FILES)

BTNG_AC_LOG_VAR(with_sundials sundials_dir)

dnl
dnl If CUBES is requested, then set up the CUBES libraries and include paths.
dnl

AC_ARG_WITH(cubes,
[  --with-cubes=PATH	Use the CUBES package
			and specify where it is.],
,with_cubes='no')

CUBES_C_FILES="error_in_script.c"
if test "$with_cubes" = no; then
   AC_MSG_NOTICE([NOTIFICATION: SAMRAI configured without the CUBES library])
   AC_DEFINE(LACKS_CUBES, [1], [Configured without Cubes library])
else
   cubes_dir="$with_cubes"
   if test ! -d "$cubes_dir" ; then
     AC_MSG_ERROR(
       [You MUST specify an existing path when using --with-cubes=PATH])
   fi
   AC_DEFINE(HAVE_CUBES, [1], [Configured with Cubes library])
   cubes_includes="-I${cubes_dir}/include -I${cubes_dir}/cart3d/include"
   cubes_lib="-L${cubes_dir} -L${cubes_dir}/cart3d/lib"
   INC_PATH="$cubes_includes $INC_PATH"
   LIB_PATH="$cubes_lib $LIB_PATH"
   LIB_NAME="${cubes_dir}/patchCubes_lib_LINUX.a ${cubes_dir}/cart3d/lib/arg.LINUX.a $LIB_NAME"
fi
BTNG_AC_LOG_VAR(with_cubes cubes_dir)


dnl
dnl If ELEVEN is requested, then set up the ELEVEN libraries and include paths.
dnl

AC_ARG_WITH(eleven,
[  --with-eleven=PATH	Use the ELEVEN package
			and specify where it is.],
,with_eleven='no')

ELEVEN_C_FILES="error_in_script.c"
if test "$with_eleven" = no; then
   AC_MSG_NOTICE([NOTIFICATION: SAMRAI configured without the ELEVEN library])
   AC_DEFINE(LACKS_ELEVEN, [1], [Configured without Eleven library])
else
   eleven_dir="$with_eleven"
   if test ! -d "$eleven_dir" ; then
     AC_MSG_ERROR(
       [You MUST specify an existing path when using --with-eleven=PATH])
   fi
   AC_DEFINE(HAVE_ELEVEN, [1], [Configured with Eleven library])
   eleven_includes="-I${eleven_dir}/common -I${eleven_dir}/mesh -I${eleven_dir}/dbase -I${eleven_dir}/dbase/gzstream -I${eleven_dir}/eleven/src -I${eleven_dir}/geom_util"
   eleven_lib="-L${eleven_dir}/eleven/lib"
   INC_PATH="$eleven_includes $INC_PATH"
   LIB_PATH="$eleven_lib $LIB_PATH"
   LIB_NAME="$LIB_NAME -l11g -lexpat"
fi
BTNG_AC_LOG_VAR(with_eleven eleven_dir)


dnl
dnl If VAMPIR is requested, then set up the VAMPIR libraries and include paths.
dnl
if test -z "$with_vampir"; then
   AC_DEFINE([LACKS_VAMPIR],[1],[LACKS_VAMPIR])
else
   if test "$with_vampir" = yes; then
      AC_MSG_CHECKING(for VAMPIR)
      vampir_dir=
      for i in /usr/global/tools/kppp/aix_5_ll/default $with_vampir; do
         if test -d $i -a -f $i/include/VT.h; then
            vampir_dir=$i
            break
         fi
      done
   else
      vampir_dir=$with_vampir
   fi

   if test -n "$vampir_dir"; then
      AC_MSG_RESULT($vampir_dir)
      AC_DEFINE([HAVE_VAMPIR],[1],[HAVE_VAMPIR])
      with_vampir=yes

      INC_PATH="-I$vampir_dir/include $INC_PATH"
      LIB_PATH="-L$vampir_dir/lib $LIB_PATH"

      case $ARCH in
         alpha)
            LIB_NAME="-lVT -lpmpi -lmld -lpthread -lm $LIB_NAME"
            ;;
         rs6000)
            LIB_NAME="-lVT -lld -lm $LIB_NAME"
            ;;
         *)
            ;;
      esac
   else
      AC_MSG_RESULT(VAMPIR library not found)
      AC_DEFINE([LACKS_VAMPIR],[1],[LACKS_VAMPIR])
      with_vampir=no
   fi
fi
BTNG_AC_LOG_VAR( with_vampir vampir_dir )

dnl
dnl If TAU is requested, setup the TAU included makefile, libraries,
dnl and include paths.
dnl
if test -z "$with_tau"; then
   AC_DEFINE([LACKS_TAU],[1],[LACKS_TAU])
else
   AC_MSG_CHECKING(for TAU)
   AC_MSG_RESULT($with_tau)
   AC_DEFINE([HAVE_TAU],[1],[HAVE_TAU])
   TAU_INCLUDE="$with_tau"
   INC_PATH="\$(TAU_INCLUDE) \$(TAU_DEFS) \$(TAU_MPI_INCLUDE) $INC_PATH"
   case $ARCH in
      Linux | LINUX | linux )
         INC_PATH="$INC_PATH"
         ;;
   esac
   LIB_NAME="\$(TAU_MPI_LIBS) \$(TAU_LIBS) $LIB_NAME"
   AC_MSG_RESULT(including TAU makefile $TAU_INCLUDE)
   TAU_INCLUDE="include $TAU_INCLUDE"
fi


dnl
dnl Determine which IEEE-specified C macros are broken.
dnl
BTNG_C_IEEE_FLOAT


# If on the alpha, and the ots library exists, use it.
# Libots is the Compiled Code Support Library used by Compaq.
if echo "$host_cpu" | grep '^alpha' > /dev/null; then
  for i in '' /usr /usr/local; do
    if test -r "$i/lib/libots.a" || test -r "$i/lib/libots.so"; then
      LIBS="$LIBS -lots"
      LIB_NAME="$LIB_NAME -lots"
      break
    fi
  done
fi


dnl
dnl Generate the installation directory for the SAMRAI libraries.  The
dnl installation location is given by $prefix/ARCH-CXX-DEBUG, which ARCH
dnl is the architecture name returned by tarch, CXX is the basename of the
dnl compiler, and DEBUG is the debug status (debug, optdebug, or opt).
dnl

debug_ext=debug
if test "$enable_opt" = "yes"; then
   if test "$enable_debug" = "yes"; then
      debug_ext=optdebug
   else
      debug_ext=opt
   fi
fi

if test "$prefix" = "NONE"; then
   dir_place_holder=`pwd`
   cd $srcdir/..
   prefix=`pwd`
   cd $dir_place_holder
fi

INSTDIR=$prefix


dnl
dnl Support rpath syntax by adding it to the LIB_PATH variable.
dnl
BTNG_AC_LOG_VAR(LIB_PATH, before adding rpath syntax)
BTNG_LIBS_ADD_RPATH(LIB_PATH,LIB_PATH,1)
BTNG_AC_LOG_VAR(LIB_PATH, after adding rpath syntax)


dnl
dnl Support a generalized way to run serial and parallel programs.
dnl This generates a file 'serpa-run' in the config directory.
dnl Use serpa-run version modified by SAMRAI.
dnl
SAMRAI_SERPA(config/serpa-run)
AC_CONFIG_FILES( config/serpa-run, chmod +x config/serpa-run )



dnl
dnl Specify how many processors to use in testing.
dnl
AC_ARG_ENABLE([test-nprocs],
[  --enable-test-nprocs=LIST	Specify number of processors to use when
				running tests.  LIST is a comma delimited
				list of integers, with 0 meaning serial run.
				Default LIST is '0,2'.],
[
case "$enable_test_nprocs" in
  yes|no)
    AC_MSG_ERROR(You must specify a list of processors for testing.)
  ;;
  *) TEST_NPROCS=$enable_test_nprocs
esac
],[TEST_NPROCS='0,2']
)
AC_SUBST(TEST_NPROCS)



dnl
dnl Make all of the macro substitutions for the generated output files
dnl

AC_SUBST(ARCH)
AC_SUBST(INSTDIR)

AC_SUBST(SAMRAI_TARGET)

AC_SUBST(TAU_INCLUDE) 

AC_SUBST(M4)
AC_SUBST(AR)
AC_SUBST(XARGS)

AC_SUBST(F77)
AC_SUBST(F77_FLAGS)

AC_SUBST(CC)
AC_SUBST(C_FLAGS)

AC_SUBST(CXX)
AC_SUBST(CXX_FLAGS)

AC_SUBST(F77LIBFLAGS)

AC_SUBST(LD_FLAGS)
AC_SUBST(CXXLD_FLAGS)

AC_SUBST(LIB_SUFFIX)

AC_SUBST(SRCDIR_COMPILE_PREFIX)
AC_SUBST(INC_PATH)
AC_SUBST(LIB_PATH)
AC_SUBST(LIB_NAME)

dnl Define a macro that links files from the compile tree to the source tree.
dnl The links have the same name as the the target.  Nothing is done if 
dnl compiling in the source directory.
dnl 
dnl Note: It would be "nicer" to have the some of the processing done below 
dnl moved into this function but it didn't seem to work.
AC_DEFUN([SAMRAI_LINK_FILES],[
test `pwd` != `cd "$srcdir" && pwd` && AC_CONFIG_LINKS($1)
]) dnl End definition of SAMRAI_LINK_FILES

# Link files for examples directory.
dnl Define standard exclude patterns so the find commands we use during
dnl autoconf does not catch files that are not intended to be a part of the library.
define(samrai_find_excludes,['!' '(' -path '*/CVS/*' -o -path '*/.svn/*' -o -name '*~' -o -name '#*#' \
-o -name '*.bak' -o -name 'bak.*' -o -path '*/bak/*' -o -name '*.BAK' -o -name 'BAK.*' -o -path '*/BAK/*' \
-o -name '*.tmp' -o -name 'tmp.*' -o -path '*/tmp/*' -o -name '*.TMP' -o -name 'TMP.*' -o -path '*/TMP/*' \
-o -name '*.old' -o -name 'old.*' -o -path '*/old/*' -o -name '*.OLD' -o -name 'OLD.*' -o -path '*/OLD/*' \
-o -name '*.new' -o -name 'new.*' -o -path '*/new/*' -o -name '*.NEW' -o -name 'NEW.*' -o -path '*/NEW/*' \
-o -name '*.save' -o -name 'save.*' -o -path '*/save/*' -o -name '*.SAVE' -o -name 'SAVE.*' -o -path '*/SAVE/*' \
')'])
dnl We are using find to find the files, but they can be listed manually also.
dnl And they don't have to all be in the same call to SAMRAI_LINK_FILES.
define(samrai_typical_example_files,['(' \
-name '*README*' -o -name '*.C' -o -name '*.h' -o -name '*.depend' -o -name '*.i' -o -name '*.m4' -o -name '*.input' \
-o -name '*.tri' -o -name '*.gzxml' ')'])

SAMRAI_LINK_FILES([ esyscmd(find examples/boundary      samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/communication samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/ConvDiff      samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/dataops       samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/Euler         samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/emb_bdry      samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/nonlinear     samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/hypre_poisson samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/FAC           samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/LinAdv        samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/mblkcomm      samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/MblkEuler     samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/MblkLinAdv    samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/memory        samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/sundials      samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/patchbdrysum  samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ esyscmd(find examples/timers        samrai_find_excludes samrai_typical_example_files | sort | sed 's/.*/\0:\0/') ])

SAMRAI_LINK_FILES([ source/test/async_comm/default.input:source/test/async_comm/default.input ])
SAMRAI_LINK_FILES([ source/test/clustering/async_br/front2d.input:source/test/clustering/async_br/front2d.input
                    source/test/clustering/async_br/front3d.input:source/test/clustering/async_br/front3d.input ])
SAMRAI_LINK_FILES([ source/test/dlbg/front2d.input:source/test/dlbg/front2d.input
                    source/test/dlbg/front3d.input:source/test/dlbg/front3d.input ])
SAMRAI_LINK_FILES([ esyscmd(find source/test/hypre -name \*.input | sort | sed 's/.*/\0:\0/') ])
SAMRAI_LINK_FILES([ source/test/FAC/inputs:source/test/FAC/inputs ])

dnl Optionally configure with performance directory if it is included.
define( [performance_dir_exists], [esyscmd( if test -d performance; then echo -n yes; else echo -n no; fi )])
m4_if(performance_dir_exists, [yes],
performance_dir=performance
SAMRAI_LINK_FILES([ esyscmd(find performance/LinAdv        samrai_find_excludes samrai_typical_example_files 2>/dev/null | sort | sed 's/.*/\0:\0/') ]),
unset performance_dir
)

dnl Undefine the m4 symbols not needed anymore.
dnl (Keep samrai_find_excludes in case it do more finds below.)
undefine([samrai_typical_example_files])

dnl
dnl Generate the output files.
dnl

dnl Find all Makefile.in and associated subdirectories.
subdirs=`cd $srcdir; find source examples ${performance_dir} tools -name Makefile.in -print | sed 's%/Makefile.in$%%g' | sort `
makefiles=
for i in $subdirs; do makefiles="$makefiles $i/Makefile"; done
BTNG_AC_LOG_VAR(makefiles)
BTNG_AC_LOG_VAR(subdirs)
$MKDIR_P $subdirs

undefine([performance_dir_exists])

AC_OUTPUT([
Makefile
config/Makefile.config config/Makefile.config.install
docs/Makefile docs/Doxyfile docs/devDoxyfile
${makefiles}
],[
dnl These are the commands that will execute after the file generations.
dnl They are run by the generated config.status script.

rm -rf Templates.DB ti_files ii_files

$MKDIR_P config include lib bin $subdirs

$INSTALL  $srcdir/COPYRIGHT COPYRIGHT
$INSTALL  $srcdir/RELEASE-NOTES RELEASE-NOTES 
$INSTALL  $srcdir/INSTALL-NOTES INSTALL-NOTES 
$INSTALL  $srcdir/examples/nonlinear/*.input source/test/nonlinear
$INSTALL  $srcdir/examples/MblkEuler/*.f  examples/MblkEuler
$MKDIR_P source/test/testtools
$INSTALL  $srcdir/source/test/testtools/* source/test/testtools
$INSTALL  $srcdir/source/test/applications/ConvDiff/*.input source/test/applications/ConvDiff
$INSTALL  $srcdir/source/test/applications/ConvDiff/*.boxes source/test/applications/ConvDiff
$INSTALL  $srcdir/source/test/applications/Euler/*.input source/test/applications/Euler
$INSTALL  $srcdir/source/test/applications/Euler/*.boxes source/test/applications/Euler
$INSTALL  $srcdir/source/test/applications/Euler/RP_test/*.input source/test/applications/Euler
$INSTALL  $srcdir/source/test/applications/Euler/RP_test/*.correct source/test/applications/Euler
$INSTALL  $srcdir/source/test/applications/LinAdv/*.input source/test/applications/LinAdv
$INSTALL  $srcdir/source/test/applications/LinAdv/*.boxes source/test/applications/LinAdv
$INSTALL  $srcdir/source/test/boundary/input_files/*.input source/test/boundary
$INSTALL  $srcdir/source/test/clustering/parallel_br/*.input  source/test/clustering/parallel_br
$INSTALL  $srcdir/source/test/clustering/parallel_br/*.boxes  source/test/clustering/parallel_br
$INSTALL  $srcdir/source/test/clustering/parallel_br/*.sh     source/test/clustering/parallel_br
$INSTALL  $srcdir/source/test/communication/*.input source/test/communication
$INSTALL  $srcdir/source/test/communication/*.input source/test/communication
$INSTALL  $srcdir/source/test/emb_bdry/*.input source/test/emb_bdry
$INSTALL  $srcdir/source/test/hierarchy/*.input source/test/hierarchy
$INSTALL  $srcdir/source/test/inputdb/*.input  source/test/inputdb
$INSTALL  $srcdir/source/test/locally_active/*.input  source/test/locally_active
$INSTALL  $srcdir/source/test/mblkcomm/*.input  source/test/mblkcomm
$INSTALL  $srcdir/source/test/MblkEuler/*.input  source/test/MblkEuler
$INSTALL  $srcdir/source/test/MblkLinAdv/*.input  source/test/MblkLinAdv
$INSTALL  $srcdir/source/test/patchbdrysum/*.input source/test/patchbdrysum
$INSTALL  $srcdir/source/test/patch_configuration/*.input source/test/patch_configuration
$INSTALL  $srcdir/source/test/sundials/*.input   source/test/sundials
$INSTALL  $srcdir/source/test/schedules/*.input  source/test/schedules
$INSTALL  $srcdir/source/test/schedules/*.boxes  source/test/schedules
$INSTALL  $srcdir/source/test/schedules/*.sh     source/test/schedules
$INSTALL  $srcdir/source/test/timers/input.file  source/test/timers


dnl
dnl Copy README files
dnl
readme=`cd $srcdir; find source -name "*README*" -print | grep -v svn`
for i in $readme; do
   $INSTALL  $srcdir/$i $i
done

],
[

dnl These commands set the environment for commands executing
dnl after file generations.
srcdir=$srcdir
subdirs="$subdirs"
sundials_dir=$sundials_dir
if test ! `cd $srcdir && pwd -P` = `pwd -P`; then
  source_tree_is_not_compile_tree=1
fi
]

)
