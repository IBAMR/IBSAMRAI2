//
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/examples/Euler/sample_input/room-3d.input $
// Package:     SAMRAI application
// Copyright:   (c) 1997-2002 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1704 $
// Modified:    $LastChangedDate: 2007-11-13 16:32:40 -0800 (Tue, 13 Nov 2007) $
// Description: Input file for SAMRAI Euler example problem (3d room)
//

Euler {
   gamma           = 1.4     // gamma = Ratio of specific heats

   godunov_order   = 4       // order of Godunov slopes 

   riemann_solve        = "APPROX_RIEM_SOLVE"
//   riemann_solve        = "EXACT_RIEM_SOLVE"
//   riemann_solve        = "HLLC_RIEM_SOLVE"

   corner_transport     = "CORNER_TRANSPORT_2"

   data_problem         = "SPHERE"

   Initial_data {
      radius            = 6.0
      center            = 34.0 , 28.0 , 10.0

      density_inside    = 8.0
      velocity_inside   = 0.0 , 0.0 , 0.0
      pressure_inside   = 40.0

      density_outside    = 1.0
      velocity_outside   = 0.0 , 0.0 , 0.0
      pressure_outside   = 1.0

   }

   Refinement_data {
      refine_criteria = "PRESSURE_GRADIENT", "PRESSURE_SHOCK"
 
      PRESSURE_GRADIENT {
         grad_tol = 10.0
      }
 
      PRESSURE_SHOCK {
         shock_tol = 10.0
         shock_onset = 0.85
      }
   }

   // valid boundary_condition values are "FLOW", "REFLECT", "DIRICHLET"
   Boundary_data {
      boundary_face_xlo {
         boundary_condition      = "REFLECT"
      }
      boundary_face_xhi {
         boundary_condition      = "REFLECT"
      }
      boundary_face_ylo {
         boundary_condition      = "REFLECT"
      }
      boundary_face_yhi {
         boundary_condition      = "REFLECT"
      }
      boundary_face_zlo {
         boundary_condition      = "REFLECT"
      }
      boundary_face_zhi {
         boundary_condition      = "REFLECT"
      }

      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for an edge, the condition must match that of the
      //            appropriate adjacent face above.  This is enforced for
      //            consistency.  However, note when a REFLECT face condition
      //            is given and the other adjacent face has either a FLOW
      //            or REFLECT condition, the resulting edge boundary values
      //            will be the same regardless of which face is used.

      boundary_edge_ylo_zlo { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZREFLECT"
      }
      boundary_edge_yhi_zlo { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZREFLECT"
      }
      boundary_edge_ylo_zhi { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZREFLECT"
      }
      boundary_edge_yhi_zhi { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZREFLECT"
      }
      boundary_edge_xlo_zlo { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XREFLECT"
      }
      boundary_edge_xlo_zhi { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XREFLECT"
      }
      boundary_edge_xhi_zlo { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XREFLECT"
      }
      boundary_edge_xhi_zhi { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XREFLECT"
      }
      boundary_edge_xlo_ylo { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YREFLECT"
      }
      boundary_edge_xhi_ylo { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YREFLECT"
      }
      boundary_edge_xlo_yhi { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YREFLECT"
      }
      boundary_edge_xhi_yhi { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YREFLECT"
      }

      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for a node, the condition must match that of the
      //            appropriate adjacent face above.  This is enforced for
      //            consistency.  However, note when a REFLECT face condition
      //            is given and the other adjacent faces have either FLOW
      //            or REFLECT conditions, the resulting node boundary values
      //            will be the same regardless of which face is used.

      boundary_node_xlo_ylo_zlo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_ylo_zlo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xlo_yhi_zlo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_yhi_zlo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xlo_ylo_zhi {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_ylo_zhi {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xlo_yhi_zhi {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_yhi_zhi {
         boundary_condition      = "XREFLECT"
      }

   }

}


Main {
// log file parameters
   log_file_name    = "room-3d.log"
   log_all_nodes    = TRUE

// visualization dump parameters 
   viz_writer            = "VisIt" // use: "Vizamrai", "VisIt" for both
   viz_dump_interval     = 1          // zero to turn off
   viz_dump_dirname      = "viz_room3d"
   viz_dump_filename     = "room3d"    // not used by VisIt
   visit_number_procs_per_file = 1    // not used by Vizamrai

// restart dump parameters
   restart_interval       = 1         // zero to turn off
   restart_write_dirname     = "restart_room3d"
}

TimerManager{
   print_exclusive      = TRUE   // output exclusive time
   timer_list               = "apps::main::*",
                              "apps::Euler::*",
                              "algs::GriddingAlgorithmX::*"
}

CartesianGeometry {
   domain_boxes   = [ (0,9,0) , (14,20,20) ],
                    [ (0,21,0) , (19,35,20) ],
                    [ (0,36,0) , (14,49,20) ],
                    [ (20,0,0) , (49,54,20) ],
                    [ (50,0,0) , (64,35,20) ],
                    [ (50,46,0) , (64,54,20) ],
                    [ (57,36,0) , (64,45,20) ]
   x_lo           = 0.e0 , 0.e0 , 0.e0    // lower end of computational domain.
   x_up           = 65.e0 , 55.e0 , 20.e0 // upper end of computational domain.
}

StandardTagAndInitialize{
   tagging_method = "GRADIENT_DETECTOR"
}

GriddingAlgorithm {
   max_levels              = 1         // Maximum number of levels in hierarchy.
   ratio_to_coarser {            // vector ratio to next coarser level
      level_1               = 4 , 4 , 4
      level_2               = 4 , 4 , 4
      level_3               = 4 , 4 , 4
   }

   largest_patch_size {
      level_0 =  48, 48, 48  // largest patch allowed in hierarchy
           // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  8, 8, 8
      // all finer levels will use same values as level_0...
   }

   efficiency_tolerance    = 0.70e0    // min % of tag cells in new patch level
   combine_efficiency      = 0.85e0    // chop box if sum of volumes of smaller
                                       // boxes < efficiency * vol of large box
}

HyperbolicLevelIntegrator {
   cfl                      = 0.9e0    // max cfl factor used in problem
   cfl_init                 = 0.1e0    // initial cfl factor
   lag_dt_computation       = TRUE
   use_ghosts_to_compute_dt = TRUE
}

TimeRefinementIntegrator {
   start_time            = 0.e0      // initial simulation time
   end_time              = 100.e0    // final simulation time
   grow_dt               = 1.1e0     // growth factor for timesteps
   max_integrator_steps  = 25        // max number of simulation timesteps
}

LoadBalancer {
// using default uniform load balance configuration (see mesh_LoadBalancerX.h.sed)
}
