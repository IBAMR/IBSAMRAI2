// 
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/examples/Euler/sample_input/room-2d.input $
// Package:     SAMRAI application
// Copyright:   (c) 1997-2008 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1917 $
// Modified:    $LastChangedDate: 2008-01-25 13:28:01 -0800 (Fri, 25 Jan 2008) $
// Description: Input file for SAMRAI Euler example problem (2d room)
//

Euler {
   gamma            = 1.4      // gamma = Ratio of specific heats

   godunov_order    = 4        // order of Goduov slopes (1, 2, or 4)

   riemann_solve        = "APPROX_RIEM_SOLVE"
//   riemann_solve        = "EXACT_RIEM_SOLVE"
//   riemann_solve        = "HLLC_RIEM_SOLVE"

   data_problem         = "SPHERE"

   Initial_data {
      radius            = 6.0
      center            = 34.0 , 28.0

      density_inside    = 8.0
      velocity_inside   = 0.0 , 0.0  
      pressure_inside   = 40.0

      density_outside    = 1.0
      velocity_outside   = 0.0 , 0.0 
      pressure_outside   = 1.0

   }

   Refinement_data {
      refine_criteria = "PRESSURE_GRADIENT", "PRESSURE_SHOCK"
 
      PRESSURE_GRADIENT {
         grad_tol = 10.0
      }

      PRESSURE_SHOCK {
         shock_tol = 10.0
         shock_onset = 0.85 
      }
   }

   // valid boundary_condition values are "FLOW", "REFLECT", "DIRICHLET"
   Boundary_data {
      boundary_edge_xlo {
         boundary_condition      = "REFLECT"
      }
      boundary_edge_xhi {
         boundary_condition      = "REFLECT"
      }
      boundary_edge_ylo {
         boundary_condition      = "REFLECT"
      }
      boundary_edge_yhi {
         boundary_condition      = "REFLECT"
      }

      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for a node, the condition must match that of the
      //            appropriate adjacent edge above.  This is enforced for
      //            consistency.  However, note when a REFLECT edge condition
      //            is given and the other adjacent edge has either a FLOW
      //            or REFLECT condition, the resulting node boundary values
      //            will be the same regardless of which edge is used.
      boundary_node_xlo_ylo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_ylo {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xlo_yhi {
         boundary_condition      = "XREFLECT"
      }
      boundary_node_xhi_yhi {
         boundary_condition      = "XREFLECT"
      }
   }
}

Main {
// log file parameters 
   log_file_name    = "room-2d.log"
   log_all_nodes    = TRUE

// visualization dump parameters
   viz_writer            = "VisIt" // use: "Vizamrai", "VisIt" for both
   viz_dump_interval     = 1          // zero to turn off
   viz_dump_dirname      = "viz_room2d"
   viz_dump_filename     = "room2d"   // not used by VisIt
   visit_file_cluster_size = 1        // not used by Vizamrai

// restart dump parameters
   restart_interval       = 1         // zero to turn off
   restart_write_dirname  = "restart_room2d"
}

TimerManager{
   print_exclusive      = TRUE   // output exclusive time
   timer_list               = "apps::main::*",
                              "apps::Euler::*",
                              "algs::GriddingAlgorithm::*",
                              "algs::HyperbolicLevelIntegrator::*"
}

CartesianGeometry{
   domain_boxes	= [(0,9),(14,20)],
                  [(0,21),(19,35)],
                  [(0,36),(14,49)],
                  [(20,0),(49,54)],
                  [(50,0),(64,35)],
                  [(50,46),(64,54)],
                  [(57,36),(64,45)]

   x_lo = 0.e0 , 0.e0   // lower end of computational domain.
   x_up = 65.e0 , 55.e0 // upper end of computational domain.
}

StandardTagAndInitialize{
   tagging_method = "GRADIENT_DETECTOR"
}

GriddingAlgorithm{
   max_levels = 3         // Maximum number of levels in hierarchy.

   ratio_to_coarser {      // vector ratio to next coarser level
      level_1 = 4 , 4
      level_2 = 4 , 4
      level_3 = 4 , 4
   }

   largest_patch_size {
      level_0 = 48 , 48
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 8 , 8 
      level_1 = 16 , 16 
      // all finer levels will use same values as level_1...
   }

   efficiency_tolerance    = 0.70e0   // min % of tag cells in new patch level
   combine_efficiency      = 0.85e0   // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

HyperbolicLevelIntegrator{
   cfl                       = 0.9e0    // max cfl factor used in problem
   cfl_init                  = 0.1e0    // initial cfl factor
   lag_dt_computation        = TRUE
   use_ghosts_to_compute_dt  = TRUE
}

TimeRefinementIntegrator{
   start_time           = 0.e0     // initial simulation time
   end_time             = 100.e0   // final simulation time
   grow_dt              = 1.1e0    // growth factor for timesteps
   max_integrator_steps = 301      // max number of simulation timesteps
}

LoadBalancer {
// using default uniform load balance configuration (see mesh_LoadBalancerX.h.sed)
}
