****************************************************************************
*  Copyright 1997-2008                                                     *
*  Lawrence Livermore National Security, LLC.                            *
*  All rights reserved.                                                    *
****************************************************************************
****************************************************************************
*                                                                          *
*  Timer example:                                                          *
*                                                                          *
****************************************************************************

This example demonstrates use of timers in a SAMRAI application. 
The files included in this directory are as follows:
 
          main.C         -  example main program
          default.input  -  input file
 
COMPILE and RUN
---------------
Compile:  make     
Run:      timers default.input                         
 

INPUTS:
------------
  
   The only component requiring input is the TimerManager.  The input 
   options for the TimerManager are discussed below.  The TYPE is
   shown in (parenthesis) and the DEFAULT setting (value set if no input
   is given) for the option is shown in [brackets].  Required inputs are
   designated by [REQD].

   TimerManager{
      // Specify which timers to invoke
      // timer_list -- (string array) list of timers to be turned on - for
      //               complete list of available timers, see
      //               SAMRAI/docs/userdocs/timing.pdf  [null]
      timer_list  = "apps::main::*",
                    "apps::Foo::someMethodName()",
                    "algs::*::*"

      // Various output options.
      // print_total      -- (bool) print total time [TRUE]
      // print_exclusive  -- (bool) output exclusive time - i.e. time spent
      //                     exclusively in each routine.  A nice way to
      //                     identify routines with bottlenecks, but is more
      //                     expensive than recording total time [FALSE].
      // print_wall       -- (bool) output wallclock time [TRUE]
      // print_user       -- (bool) output user time [FALSE]
      // print_sys        -- (bool) output system time [FALSE]
      // print_summed     -- (bool) output sum of times measured across all
      //                     processors during a parallel run [FALSE].
      // print_max        -- (bool) output maximum time spent on any one
      //                     processor, along with the processor ID [FALSE]
      // print_percentage -- (bool) output percentage of total time for each
      //                     printed timer [TRUE]
      // print_concurrent -- (bool) in the process of performing exclusive
      //                     time, a nested call tree is created; print the
      //                     tree [FALSE]
      // print_timer_overhead -- (bool) each timer start/stop invocation
      //                     incurs about one-half a millionth of a second
      //                     overhead.  This option will output the number of
      //                     invocations and the total predicted overhead for
      //                     all the timers [FALSE]
      // print_threshold  -- (double) do not print any timers that constitute
      //                     < (print_threshold)% of overall run time. Useful 
      //                     to prevent gobs of output if many timers are
      //                     turned on. [0.25]
      print_exclusive = TRUE
      print_max = TRUE
      print_timer_overhead = TRUE
      print_threshold = 0.0
   }


