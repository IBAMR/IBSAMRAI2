****************************************************************************
*  Copyright 1997-2008                                                     *
*  Lawrence Livermore National Security, LLC.                            *
*  All rights reserved.                                                    *
****************************************************************************
****************************************************************************
*                                                                          *
*  FAC solver example:                                                     *
*                                                                          *
****************************************************************************

This example demonstrates use of the FAC classes in a SAMRAI application. 
The files included in this directory are as follows:
 
	  FACPoisson.h, FACPoisson.C
                        -  Class to set up and solve the scalar
                           Poisson equation.
          main.C        -  example main program

Class FACPoisson uses the solver defined in CellPoissonFACSolver.
This class assembles the the FAC algorithm in FACPreconditioner,
and the level operations in CellPoissonFACOps.  It uses the
Robin boundary condition, which is accessed through the virtual
interface defined by RobinBcCoefStrategy class.

This example uses the library-implemented LocationIndexRobinBcCoefs
version of the Robin boundary condition.  Other versions of Robin
boundary conditions may be used, including user-defined.  See the
RobinBcCoefStrategy class.  The boundary conditions specified
in the input files are parsed by that the LocationIndexRobinBcCoefs
class.
 
COMPILE and RUN
---------------
Compile:  make main2d main3d
Run:      main2 2d.default.input
          main2 2d.otherbc.input
          main2 2d.const-refine.input
          main3 3d.default.input
          main3 3d.otherbc.input
          main3 3d.const-refine.input
 

INPUTS
------

   The input files *.default.input have sample default settings.
   Variations of the boundary conditions in this example are shown
   in the files *otherbc.input.  (Other ways to vary boundary
   conditions are to supply different implementations of the
   RobinBcCoefStrategy strategy class.)  Using constant refinement
   in the prolongation step is shown in the *.const-refine.input
   files.  (Constant refinement gives slower convergence but may
   be more effective with strongly varying diffusion coefficients.)

   Main {
      // General specifications.
      base_name = "default2"	// The base file name for output files.
      vis_filename = "default2"	// The base file name for visualization files.
                                // defaults to the base name.
   }

   FACPoisson {
     // The FACPoisson class is the "user class" in this example.
     // It owns the solver and contains the code to set up the solver.
     // The inputs for FACPoisson is simply the inputs for the individual
     // parts owned by the FACPoisson class.
     fac_solver {
       // This is the input for the cell-centered Poisson FAC solver
       // class in the SAMRAI library.
       enable_logging = TRUE // Bool flag to switch logging on/off
       max_iterations = 30   // Max number of FAC cycles to use
       residual_tol = 1.e-8  // Residual tolerance to solve for
       num_pre_sweeps = 1    // Number of presmoothing sweeps to use
       num_post_sweeps = 3   // Number of postsmoothing sweeps to use
     }
     bc_coefs {
       // These are the boundary condition specifications.  The number
       // after "boundary_" is the location index of the boundary.
       // The inputs are arrays of strings where the first string
       // indicates the type of values you want to set.  "slope" means
       // boundary slope, "value" means boundary value, and "coefficients"
       // mean the raw Robin boundary condition coefficients.
       // The remaining strings are converted into numbers as
       // appropriate for what boundary condition you specified with
       // the first string.  Other boundary conditions are possible.
       // see the solv_RobinBcCoefStrategy class.
       boundary_0 = "slope", "0"
       boundary_1 = "coefficients", "0", "0"
       boundary_2 = "value", "0"
       boundary_3 = "value", "0"
     }
   }

   "CartesianGeometry" input section
   ---------------------------------
   CartesianGeometry {
      //  Specify lower/upper corners of the computational domain and a
      //  set of non-overlapping boxes defining domain interior.  If union 
      //  of boxes is not a parallelpiped, lower/upper corner data corresponds 
      //  to min/max corner indices over all boxes given.
      //  x_lo  -- (double array) lower corner of computational domain [REQD]
      //  x_up  -- (double array) upper corner of computational domain [REQD]
      //  domain_boxes  -- (box array) set of boxes that define interior of 
      //                   hysical domain. [REQD]
      //  periodic_dimension -- (int array) coordinate directions in which 
      //                        domain is periodic.  Zero indicates not
      //                        periodic, non-zero value indicates periodicity.
      //                        [0]
      x_lo = 0.e0 , 0.e0           
      x_up = 65.e0 , 55.e0       
      domain_boxes      = [(0,9),(14,20)],
                          [(0,21),(19,35)],
                          [(0,36),(14,49)],
                          [(20,0),(49,54)],
                          [(50,0),(64,35)],
                          [(50,46),(64,54)],
                          [(57,36),(64,45)]
      periodic_dimension = 0, 1  // periodic in y only
   }


   "GriddingAlgorithm" input section
   ---------------------------------
   GriddingAlgorithm {
      // Information used to create patches in AMR hierarchy.
      // max_levels -- (int) max number of mesh levels in hierarchy [REQD]
      // 
      // For most of the following parameters, the number of precribed data
      // values need not match the number of levels in the hierarchy 
      // (determined by max_levels).  If more values are given than number 
      // of levels, extraneous values will be ignored.  If less are give, then
      // values that correspond to individual levels will apply to those 
      // levels.  Missing values will be taken from those for the finest
      // level specified.
      //
      // ratio_to_coarser {
      //   level_1 -- (int array) ratio between index spaces on 
      //              level 1 to level 0 [REQD]
      //   level_2 -- (int array)  ratio between index spaces on 
      //              level 2 to level 1 [REQD]
      //   etc....
      // }
      // largest_patch_size {
      //   level_0 -- (int array) largest patch allowed on level 0. 
      //              [REQD]    
      //   level_1 -- (int array)    "       "      "   "  level 1 
      //              [level 0 entry]
      //   etc....                       
      // }
      max_levels = 3
      ratio_to_coarser {
         level_1 = 4 , 4
         level_2 = 4 , 4
         level_3 = 4 , 4
      }
      largest_patch_size {
         level_0 = 48 , 48
      }
   }

   "StandardTagAndInitialize" input section
   ---------------------------------------------
   StandardTagAndInitialize {
      // Specification of the type of tagging to be performed
      // tagging_method -- (string array) one or more entries specifying
      //                 the tagging algorithm used.  Options include:
      //                 "GRADIENT_DETECTOR"
      //                 "RICHARDSON_EXTRAPOLATION"
      //                 "REFINE_BOXES"
      //
      // REFINE_BOXES allows you to prescribe where refinement should occur.
      // If this option is used, you must also supply a RefineBoxes database
      // entry with the refine boxes on different levels specified.  i.e.
      //    RefineBoxes{
      //        level_0 -- (BoxArray) Boxes to be refined on level 0
      //        level_1 -- (BoxArray) Boxes to be refined on level 1
      //        etc.
      //
      // Static refine boxes option.
      tagging_method = "REFINE_BOXES"
      RefineBoxes {
        level0_boxes = [(15,0),(29,14)]
        level1_boxes = [(65,10),(114,40)]
      }
   }
