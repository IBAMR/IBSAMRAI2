//
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/examples/mblkcomm/input_files/edge-3d.input $
// Package:     SAMRAI tests
// Copyright:   (c) 1997-2002 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1704 $
// Modified:    $LastChangedDate: 2007-11-13 16:32:40 -0800 (Tue, 13 Nov 2007) $
// Description: input file for testing communication of SAMRAI edge data.
//

Main {
//
// Log file information
//
    log_file_name  = "edge-test.log"
    log_all_nodes  = TRUE

//
// Testing information, including number of times to perform schedule
// creation and communication processes, name of particular patch data
// test, and refine and coarsen test information
//    
    ntimes_run = 1  // default is 1

//
// Available tests are:
// 
//    test_to_run = "CellMultiblockTest"
    test_to_run = "EdgeMultiblockTest"
//  test_to_run = "FaceMultiblockTest"
//  test_to_run = "NodeMultiblockTest"
//  test_to_run = "SideMultiblockTest"
//  test_to_run = "MultiVariableMultiblockTest"

//  
// Either refine test or coarsen test can be run, but not both.  This 
// ensures proper validation of communicated data.  Default test is 
// to refine refine data with interior patch data filled from same level.
// If `do_refine' is true, then refine test will occur and coarsen test
// will not.  Refine test also allows option of filling patch interiors 
// from coarser levels.  Coarsen test has no options as coarse patch 
// interiors will always be filled with coarsened data from finer level.
//
    do_refine = TRUE
    refine_option = "INTERIOR_FROM_SAME_LEVEL"
 
    do_coarsen = FALSE
}

TimerManager {
    timer_list = "test::main::*"

// Available timers are:
//
//   "test::main::createRefineSchedule"
//   "test::main::performRefineOperations"
//   "test::main::createCoarsenSchedule"
//   "test::main::performCoarsenOperations"
//
    
}

EdgeMultiblockTest {

   //
   // Anything specific to the test goes here...
   //
   // e.g., coefficients for linear function to interpolate
   //          Ax + By + Cz + D = f(x,y,z)
   //          (NOTE: f(x,y,z) is the value assigned to each 
   //                 array value at initialization and 
   //                 against which interpolation is tested) 
   //   
   Acoef = 2.1
   Bcoef = 3.2
   Ccoef = 4.3
   Dcoef = 5.4

   //
   // The VariableData database is read in by the PatchMultiblockTestStrategy
   // base class.  Each sub-database must contain variable parameter data.
   // The name of the sub-databases for each variable is arbitrary.  But
   // the names must be distinct.  
   // 
   //    Required input:  name
   //    Optional input:  depth              (default = 1)
   //                     src_ghosts         (default = 0,0,0)
   //                     dst_ghosts         (default = 0,0,0)
   //                     coarsen_operator   (default = "NO_COARSEN")
   //                     refine_operator    (default = "NO_REFINE")
   //
   VariableData {

      variable_1 {
         src_name = "src_var1"
         dst_name = "dst_var1"
         depth = 1
         src_ghosts = 0,0,0
         dst_ghosts = 1,1,1
         coarsen_operator = "NO_COARSEN"
         refine_operator = "NO_REFINE"
      }
   }

   RefinementData {
   }

}

BlockGridGeometry0 {
   domain_boxes = [ (0,0,0) , (20,13,15) ]
}
BlockGridGeometry1 {
   domain_boxes = [ (0,0,0) , (25,13,15) ]
}
BlockGridGeometry2 {
   domain_boxes = [ (0,0,0) , (15,25,20) ]
}

Multiblock {
   num_blocks = 3

   Singularity0 {
      blocks = 0,1,2

      sing_box_0 = [(21,14,0),(21,14,15)]
      sing_box_1 = [(-1,14,0),(-1,14,15)]
      sing_box_2 = [(0,-1,21),(15,-1,21)]
   }
 
   BlockNeighbors0 {
      block_a = 0
      block_b = 1

      rotation_b_to_a = "I_UP", "J_UP", "K_UP"
      point_in_a_space = 21,0,0
      point_in_b_space = 0,0,0
   }

   BlockNeighbors1 {
      block_a = 0
      block_b = 2

      rotation_b_to_a = "K_UP", "J_UP", "I_DOWN"
      point_in_a_space = 0,14,0
      point_in_b_space = 15,0,0

   }

   BlockNeighbors2 {
      block_a = 1
      block_b = 2

      rotation_b_to_a = "J_UP", "K_DOWN", "I_DOWN"
      point_in_a_space = 0,14,0
      point_in_b_space = 15,0,20

   }
}


GriddingAlgorithm {
   max_levels              = 2 // Maximum number of levels in hierarchy.

// Note: For the following regridding information, data is required for each
//       potential in the patch hierarchy; i.e., levels 0 thru max_levels-1.
//       If more data values than needed are given, only the number required
//       will be read in.  If fewer values are given, an error will result.
//
// Specify coarsening ratios for each level 1 through max_levels-1
   ratio_to_coarser {         // vector ratio to next coarser level
      level_1               =  2 , 2 , 2
      level_2               =  2 , 2 , 2
   }

   largest_patch_size {
      level_0 = 40, 40, 40
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 2, 2, 2
      // all finer levels will use same values as level_0...
   }

   efficiency_tolerance     = 0.70e0   // min % of tag cells in new patch level
   combine_efficiency       = 0.85e0   // chop box if sum of volumes of smaller
                                       // boxes < efficiency * vol of large box
}

LoadBalancer {
// processors      = 1 , 1 
   use_spatial_bin_pack = TRUE
}

StandardTaggingAndInitializer {
   tagging_method = "REFINE_BOXES"

   RefineBoxes {
      level_0 = [ (5,5,5) , (6,7,7) ]
   }

}
