// 
// input file for the multiblock linear advector for advecting a blob through
// a spherical shell
//

// -------------------------------------------------------------------
//  problem setup
// -------------------------------------------------------------------

// ----------------- define the size of each block
MLEVELS = 1

MblkGeometry {
   problem_type = "TRILINEAR"

   TrilinearGeometry {
      mesh_filename = "cdw.mesh"
   }

}

MblkEuler {

   advection_test     = 1

   // 0, cartesian, 1 R translation, 2 rigid body theta rotation, 4, rigid body phi rotation
   advection_vel_type = 0
	
   // advection_velocity = 2.0e0 , 0.0e0 , 0.0e0
   // advection_velocity = 0.0e0 , 2.0e0 , 0.0e0
   advection_velocity = 2.0e0 , 0.0e0 , 0.0e0

   data_problem      = "SPHERE"

   // center            = xx, yy, zz     // middle of block 0
   // center            = yy, xx, zz  // middle of block 1
   // center               = xxx, yyy, zzz  // middle of block 2
   // center            = 0.75 , 0.75, 0.75 // middle of the shell
   // front_position    = 0.0, 0.2, 1.e20
   
   //center            = 8.0, 4.0, 4.0 // middle of the shell
   //center            = 4.0, 8.0, 4.0 // middle of the shell
   center            = 4.0, 4.0, 8.0 // middle of the shell
   front_position    = 0.0, 1.5, 1.e20

   // center            = 1.25, 1.25, 1.25 // middle of the shell
   // front_position    = 0.0, 0.75, 1.e20

   state_names = "rho"

   state_data {
      rho = 1.0, 0.0
   }

/*
   state_names = "rho", "u", "v", "w", "p", "ss"

   state_data {
      rho = 1.0, 2.0
      u   = 1.0, 0.0
      v   = 1.0, 4.0
      w   = 1.0, 0.0
      p   = 1.0, 6.0
      ss  = 1.0, 0.0
   }
*/

   Refinement_data {
      refine_criteria = "GRADIENT"

      GRADIENT {
         names = "rho"
         rho   = 0.5
      }
   }

}


// -------------------------------------------------------------------
//  hydro blocks
// -------------------------------------------------------------------

Main {
// log file parameters 
   log_file_name    = "cdw.log"
   log_all_nodes    = TRUE

// visualization dump parameters 
   viz_writer            = "VisIt" // use: "Vizamrai", "VisIt" for both
   viz_dump_interval     = 1          // zero to turn off
   viz_dump_dirname      = "viz_cdw"
   viz_dump_filename     = "octant"    // not used by VisIt
   visit_number_procs_per_file = 1    // not used by Vizamrai


// restart dump parameters
   restart_interval       = 0         // zero to turn off
   restart_write_dirname  = "restart_cdw"

}


TimerManager {
   timer_list               = "apps::*::*",
                              "algs::*::*",
                              "mesh::*::*"
//   print_exclusive      = TRUE
   print_summed           = TRUE
   print_max              = TRUE
//   print_timer_overhead   = TRUE
   print_threshold        = 0.0
}


GriddingAlgorithm{
   max_levels = MLEVELS       // Maximum number of levels in hierarchy.

// Note: For the following regridding information, data is required for each
//       potential in the patch hierarchy; i.e., levels 0 thru max_levels-1.
//       If more data values than needed are given, only the number required
//       will be read in.  If fewer values are given, an error will result.
//
// Specify coarsening ratios for each level 1 through max_levels-1

   ratio_to_coarser {      // vector ratio to next coarser level
      level_1 = 2 , 2 , 2
   }

   largest_patch_size {
      level_0 = 40, 40, 40
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 2 , 2 , 2
      // all finer levels will use same values as level_0...
   }

   // efficiency_tolerance    = 0.85e0   // min % of tag cells in new patch level
   // combine_efficiency      = 0.85e0   // chop box if sum of volumes of smaller
   efficiency_tolerance    = 0.7e0   // min % of tag cells in new patch level
   combine_efficiency      = 0.7e0   // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}


StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}


HyperbolicLevelIntegrator{
   cfl                       = 0.5e0    // max cfl factor used in problem
   cfl_init                  = 0.5e0    // initial cfl factor
   lag_dt_computation        = TRUE
   use_ghosts_to_compute_dt  = TRUE
}


TimeRefinementIntegrator{
   tag_buffer           = 2, 2, 2 // number of zones used in the tag buffer
   start_time           = 0.e0     // initial simulation time
   end_time             = 100.e0   // final simulation time
   grow_dt              = 1.1e0    // growth factor for timesteps
   max_integrator_steps = 100    // max number of simulation timesteps
}


LoadBalancer {
}


// -------------------------------------------------------------------
//  The mesh
// -------------------------------------------------------------------

#include "cdw.inc"
