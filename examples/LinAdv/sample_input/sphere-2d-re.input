// 
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/examples/LinAdv/sample_input/sphere-2d-re.input $
// Package:     SAMRAI application
// Copyright:   (c) 1997-2008 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1917 $
// Modified:    $LastChangedDate: 2008-01-25 13:28:01 -0800 (Fri, 25 Jan 2008) $
// Description: Input file for SAMRAI LinAdv example problem 
//

LinAdv {

   advection_velocity = 2.0e0 , 1.0e0 
   godunov_order    = 4                // order of Goduov slopes (1, 2, or 4)
   corner_transport = "CORNER_TRANSPORT_1"

   data_problem      = "SPHERE" 

   Initial_data {
      radius            = 2.9   
      center            = 22.5 , 5.5 

      uval_inside       = 80.0
      uval_outside      = 5.0
 
   }

   Refinement_data {
      refine_criteria = "UVAL_RICHARDSON", "UVAL_GRADIENT", "UVAL_SHOCK"
 
      UVAL_RICHARDSON {
         rich_tol = 0.1, 0.1, 0.001
      }

      // UVAL_GRADIENT AND UVAL_SHOCK criteria are applied only if the gradient 
      // detector is turned on in the StandardTagAndInitialize input below...
      UVAL_GRADIENT {
         grad_tol = 10.0
      }
 
      UVAL_SHOCK {
         shock_tol = 10.0
         shock_onset = 0.85
      }
   }

  // valid boundary_condition values are "FLOW", "REFLECT", "DIRICHLET"
   Boundary_data {
      boundary_edge_xlo {
         boundary_condition      = "FLOW"
      }
      boundary_edge_xhi {
         boundary_condition      = "FLOW"
      }
      boundary_edge_ylo {
         boundary_condition      = "FLOW"
      }
      boundary_edge_yhi {
         boundary_condition      = "FLOW"
      }

      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for a node, the condition must match that of the
      //            appropriate adjacent edge above.  This is enforced for
      //            consistency.  However, note when a REFLECT edge condition
      //            is given and the other adjacent edge has either a FLOW
      //            or REFLECT condition, the resulting node boundary values
      //            will be the same regardless of which edge is used.
      boundary_node_xlo_ylo {
         boundary_condition      = "XFLOW"
      }
      boundary_node_xhi_ylo {
         boundary_condition      = "XFLOW"
      }
      boundary_node_xlo_yhi {
         boundary_condition      = "XFLOW"
      }
      boundary_node_xhi_yhi {
         boundary_condition      = "XFLOW"
      }
   }

}

Main {
// log file parameters 
   log_file_name    = "sphere-2d.log"
   log_all_nodes    = TRUE

// visualization dump parameters 
   viz_writer            = "VisIt" // use: "Vizamrai", "VisIt" for both
   viz_dump_interval     = 1          // zero to turn off
   viz_dump_dirname      = "viz_sphere2d"
   viz_dump_filename     = "sphere2d"    // not used by VisIt
   visit_number_procs_per_file = 1    // not used by Vizamrai

// restart dump parameters
   restart_interval       = 0         // zero to turn off
   restart_write_dirname  = "restart_sphere2d"
}

CartesianGeometry{
   domain_boxes	= [(0,0),(29,19)]

   x_lo = 0.e0 , 0.e0   // lower end of computational domain.
   x_up = 30.e0 , 20.e0 // upper end of computational domain.

   periodic_dimension = 1,0
}

GriddingAlgorithm{
   max_levels = 4         // Maximum number of levels in hierarchy.

// Note: For the following regridding information, data is required for each
//       potential in the patch hierarchy; i.e., levels 0 thru max_levels-1.
//       If more data values than needed are given, only the number required
//       will be read in.  If fewer values are given, an error will result.
//
// Specify coarsening ratios for each level 1 through max_levels-1

   ratio_to_coarser {      // vector ratio to next coarser level
      level_1 = 4 , 4
      level_2 = 2 , 2
      level_3 = 2 , 2
      level_4 = 2 , 2
   }

   largest_patch_size {
      level_0 = 40 , 40
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 16 , 16 
      // all finer levels will use same values as level_0...
   }

   efficiency_tolerance    = 0.85e0   // min % of tag cells in new patch level
   combine_efficiency      = 0.95e0   // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
//   tagging_method = "GRADIENT_DETECTOR"
   tagging_method = "RICHARDSON_EXTRAPOLATION"
//   tagging_method = "RICHARDSON_EXTRAPOLATION", "GRADIENT_DETECTOR"
//   tagging_method = "REFINE_BOXES"
//   RefineBoxes {
//      level_0 = [(15,0),(29,14)]
//      level_1 = [(65,10),(114,40)]
//   }
}

HyperbolicLevelIntegrator{
   cfl                       = 0.9e0    // max cfl factor used in problem
   cfl_init                  = 0.9e0    // initial cfl factor
   lag_dt_computation        = TRUE
   use_ghosts_to_compute_dt  = TRUE
}

TimeRefinementIntegrator{
   start_time           = 0.e0     // initial simulation time
   end_time             = 100.e0   // final simulation time
   grow_dt              = 1.1e0    // growth factor for timesteps
   max_integrator_steps = 25       // max number of simulation timesteps

   tag_buffer = 2,2,2
}
LoadBalancer {
// using default uniform load balance configuration (see mesh_LoadBalancerX.h.sed)
}
