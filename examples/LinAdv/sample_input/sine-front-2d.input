//
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/examples/LinAdv/sample_input/sine-front-2d.input $
// Package:     SAMRAI application
// Copyright:   (c) 1997-2000 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1704 $
// Modified:    $LastChangedDate: 2007-11-13 16:32:40 -0800 (Tue, 13 Nov 2007) $
// Description: Input file for SAMRAI Linadv example problem 
//              (2d sinusoidal fronusoidal frontt)
//


LinAdv {
   advection_velocity = 2.0e0 , 0.1e0

   godunov_order    = 4
   corner_transport = "CORNER_TRANSPORT_1"

   data_problem      = "SINE_CONSTANT_X"

   Initial_data {
      front_position    = 0.0
      interval_0 {
         uval      = 40.0
      }
      interval_1 {
         uval      = 1.0
      }
      amplitude = 0.25 
      frequency = 2.0, 2.0

   }

   Refinement_data {
      refine_criteria = "UVAL_GRADIENT", "UVAL_SHOCK"
 
      UVAL_GRADIENT {
         grad_tol = 10.0
      }
 
      UVAL_SHOCK {
         shock_tol = 10.0
         shock_onset = 0.85
      }
   }

  // valid boundary_condition values are "FLOW", "REFLECT", "DIRICHLET"
   Boundary_data {
      boundary_edge_xlo {
         boundary_condition      = "FLOW"
      }
      boundary_edge_xhi {
         boundary_condition      = "FLOW"
      }
      boundary_edge_ylo {
         boundary_condition      = "FLOW"
      }
      boundary_edge_yhi {
         boundary_condition      = "FLOW"
      }

      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for a node, the condition must match that of the
      //            appropriate adjacent edge above.  This is enforced for
      //            consistency.  However, note when a REFLECT edge condition
      //            is given and the other adjacent edge has either a FLOW
      //            or REFLECT condition, the resulting node boundary values
      //            will be the same regardless of which edge is used.
      boundary_node_xlo_ylo {
         boundary_condition      = "XFLOW"
      }
      boundary_node_xhi_ylo {
         boundary_condition      = "XFLOW"
      }
      boundary_node_xlo_yhi {
         boundary_condition      = "XFLOW"
      }
      boundary_node_xhi_yhi {
         boundary_condition      = "XFLOW"
      }
   }
}

Main {
// log file parameters 
   log_file_name    = "sine-2d.log"
   log_all_nodes    = TRUE

// visualization dump parameters 
   viz_writer            = "VisIt" // use: "Vizamrai", "VisIt" for both
   viz_dump_interval     = 1          // zero to turn off
   viz_dump_dirname      = "viz_sine2d"
   viz_dump_filename     = "sine2d"    // not used by VisIt
   visit_number_procs_per_file = 1    // not used by Vizamrai

// restart dump parameters 
   restart_interval        = 0        // zero to turn off
   restart_write_dirname   = "restart_sine2d"

   run_time_plotting = FALSE
}

TimerManager {
   print_exclusive      = TRUE   
   timer_list               = "apps::*::*",
                              "algs::*::*",
                              "mesh::*::*"
}

CartesianGeometry {
   domain_boxes  = [ (0,0) , (39,19) ]
   x_lo          = -2.e0, -1.e0     // lower end of computational domain.
   x_up          = 2.e0, 1.e0   // upper end of computational domain.
}

GriddingAlgorithm {
   max_levels             = 3        // Maximum number of levels in hierarchy.
   ratio_to_coarser {            // vector ratio to next coarser level
      level_1             = 4 , 4 
      level_2             = 4 , 4 
   }

   largest_patch_size {
      level_0 =  19, 19  // largest patch allowed in hierarchy
           // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  8, 8
      // all finer levels will use same values as level_0...
   }

   efficiency_tolerance   = 0.70e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.85e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
//   write_regrid_boxes    = TRUE
   regrid_boxes_filename  = "regrid_boxes"
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}


HyperbolicLevelIntegrator {
   cfl                      = 0.9e0    // max cfl factor used in problem
   cfl_init                 = 0.1e0    // initial cfl factor
   lag_dt_computation       = TRUE
   use_ghosts_to_compute_dt = TRUE
}

TimeRefinementIntegrator {
   start_time            = 0.e0     // initial simulation time
   end_time              = 100.e0   // final simulation time
   grow_dt               = 1.1e0    // growth factor for timesteps
   max_integrator_steps  = 25     // max number of simulation timesteps
}

LoadBalancer {
// using default uniform load balance configuration (see mesh_LoadBalancerX.h.sed)
}
