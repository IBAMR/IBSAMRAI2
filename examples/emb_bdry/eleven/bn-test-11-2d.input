//
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/examples/emb_bdry/eleven/bn-test-11-2d.input $
// Package:     SAMRAI application
// Copyright:   (c) 1997-2002 Lawrence Livermore National Security, LLC
// Release:     $Name:  $
// Revision:    $LastChangedRevision: 1704 $
// Modified:    $LastChangedDate: 2007-11-13 16:32:40 -0800 (Tue, 13 Nov 2007) $
// Description: Input file for SAMRAI embedded boundary ELEVEN example
//

Main {

   log_file_name            = "bn2d-11-test.log"

   visit_dump_interval        = 1      
   visit_dump_dirname         = "viz_11-2dbntest"

   print_boundarynode_data    = TRUE
}

EmbeddedBoundaryGeometry {
   max_subdivides             = 6
   read_from_file             = FALSE
   write_to_file              = FALSE
   dirname                    = "simple"
   use_recursive_algs         = FALSE
   compute_areas_and_normal   = FALSE
   compute_boundary_node_data = FALSE

   ElevenPatchInterface {
        use_boundary_node     = TRUE
	//database_file = "freeform.gzxml"
	database_file = "circle_r.3.gzxml"
	//geom_tolerance = 0.01 // 1% of bounding box 
    }

}

SampleApp {
   tag_cut_cells = TRUE
   tag_growing_sphere = FALSE
}

CartesianGeometry {
   domain_boxes  = [ (0,0) , (39,39) ]   // coarse mesh
   x_lo          = -1.e0 , -1.e0  // lower end of computational domain.
   x_up          = 1.e0 , 1.e0  // upper end of computational domain.
}

GriddingAlgorithm {
   max_levels              = 3 // Maximum number of levels in hierarchy.

// Note: For the following regridding information, data is required for each
//       potential in the patch hierarchy; i.e., levels 0 thru max_levels-1.
//       If more data values than needed are given, only the number required
//       will be read in.  If fewer values are given, an error will result.
//
// Specify coarsening ratios for each level 1 through max_levels-1
   ratio_to_coarser {         // vector ratio to next coarser level
      level_1               = 2 , 2 
      level_2               = 4 , 4 
      level_3               = 4 , 4 
   }

   largest_patch_size {
      level_0 = 200 , 200
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 1 , 1 
      // all finer levels will use same values as level_0...
   }

   efficiency_tolerance     = 0.70e0   // min % of tag cells in new patch level
   combine_efficiency       = 0.85e0   // chop box if sum of volumes of smaller
                                       // boxes < efficiency * vol of large box
}

StandardTagAndInitialize{
   tagging_method = "GRADIENT_DETECTOR"
//   tagging_method = "REFINE_BOXES"
//   RefineBoxes {
//      level_0  = [ (10,10) , (80,80) ]
//   }
}

TimerManager {
   timer_list = "apps::main::*"
}


UniformLoadBalance {  // for SAMRAI v1.3.1
//   processors         = 1 , 1
   use_spatial_bin_pack = TRUE
}
LoadBalancer {  // for SAMRAI v1.3.2
   use_spatial_bin_pack = TRUE
}

