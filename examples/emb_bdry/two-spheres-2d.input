//
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/examples/emb_bdry/two-spheres-2d.input $
// Package:     SAMRAI application
// Copyright:   (c) 1997-2002 Lawrence Livermore National Security, LLC
// Release:     $Name:  $
// Revision:    $LastChangedRevision: 1704 $
// Modified:    $LastChangedDate: 2007-11-13 16:32:40 -0800 (Tue, 13 Nov 2007) $
// Description: Input file for SAMRAI embedded boundary test
//

Main {

   log_file_name            = "two-spheres-2d.log"

   visit_dump_interval        = 1      
   visit_dump_dirname         = "viz_two-spheres-2d"

}

SampleApp {
  tag_cut_cells        = TRUE 
}

EmbeddedBoundaryGeometry {

// set max_subdivides larger to reduce error in volume and 
// area fractions in cut cells 
      max_subdivides = 8

      read_from_file  = FALSE 
      write_to_file   = FALSE
      dirname        = "simple"

      compute_areas_and_normal = TRUE
      compute_boundary_node_data = FALSE
      use_recursive_algs       = TRUE 

// Set the shapes used - note: each sub-database should be named
// something different because the input_manager is unable to
// store two databases of the same name.  The name can be arbitrary.
// Input should be of the form:
   Shapes {
      Shape1 {
         type = "SPHERE"    
         center = 35., 50.
         radius = 20.     
      }
      Shape2 {
         type = "SPHERE"    
         center = 65., 50.
         radius = 20.     
      }
   }

}

CartesianGeometry {
   domain_boxes  = [ (0,0) , (99,99) ]   // coarse mesh
   x_lo          = 0.e0 , 0.e0  // lower end of computational domain.
   x_up          = 100.e0 , 100.e0  // upper end of computational domain.
}

GriddingAlgorithm {
   max_levels              = 5 // Maximum number of levels in hierarchy.

// Note: For the following regridding information, data is required for each
//       potential in the patch hierarchy; i.e., levels 0 thru max_levels-1.
//       If more data values than needed are given, only the number required
//       will be read in.  If fewer values are given, an error will result.
//
// Specify coarsening ratios for each level 1 through max_levels-1
   ratio_to_coarser {         // vector ratio to next coarser level
      level_1               = 2 , 2 
      level_2               = 2 , 2 
      level_3               = 2 , 2 
      level_4               = 2 , 2 
      level_5               = 2 , 2 
   }

   largest_patch_size {
      level_0 = 19 , 19 
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 1 , 1 
      // all finer levels will use same values as level_0...
   }

   efficiency_tolerance     = 0.70e0   // min % of tag cells in new patch level
   combine_efficiency       = 0.85e0   // chop box if sum of volumes of smaller
                                       // boxes < efficiency * vol of large box
}

StandardTagAndInitialize{
   tagging_method = "GRADIENT_DETECTOR"
//   tagging_method = "REFINE_BOXES"
//   RefineBoxes {
//      level_0  = [ (10,10) , (80,80) ]
//   }
}

TimerManager {
   timer_list = "apps::main::*"
}


UniformLoadBalance {  // for SAMRAI v1.3.1
//   processors         = 1 , 1
   use_spatial_bin_pack = TRUE
}
LoadBalancer {  // for SAMRAI v1.3.2
   use_spatial_bin_pack = TRUE
}

