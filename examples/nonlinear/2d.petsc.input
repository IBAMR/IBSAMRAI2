//
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/examples/nonlinear/2d.petsc.input $
// Package:     SAMRAI application
// Copyright:   (c) 1997-2008 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1917 $
// Modified:    $LastChangedDate: 2008-01-25 13:28:01 -0800 (Fri, 25 Jan 2008) $
// Description: Input file for 2D nonlinear solver example using PETSc.
//
// This is the input file for the 2D nonlinear solver example using PETSc.

Main{

   base_name = "2d.petsc"

// visualization dump parameters 
   viz_writer            = "VisIt" // use: "Vizamrai", "VisIt" for both
   viz_dump_interval     = 1          // zero to turn off
   viz_dump_dirname      = "2d.petsc.visit"
   viz_dump_filename     = "2d.petsc"    // not used by VisIt
   visit_number_procs_per_file = 1    // not used by Vizamrai

// regrid parameters
   regrid_interval       = 0         // zero to turn off

// Options for nonlinear solver package are:
//     "KINSOL" (default), or "PETSc-SNES"
   // nonlinear_solver_package = "KINSOL"
   nonlinear_solver_package = "PETSc-SNES"

}

TimerManager{
   maintain_exclusive_time = TRUE
   maintain_concurrent_time = TRUE
   timer_list               = "apps::main::*", "apps::usrFcns::*"
}

CartesianGeometry{
   domain_boxes = [(0,0), (31,31)]
   x_lo         = 0.0e0, 0.0e0   
   x_up         = 1.0e0, 1.0e0
}

GriddingAlgorithm{
   max_levels = 8
   largest_patch_size {
      level_0 = 32, 32
      // all finer levels will use same values as level_0...
   }

 smallest_patch_size {
      level_0 = 4,4
      // all finer levels will use same values as level_0...
   }
   ratio_to_coarser {
      level_1            = 2, 2
      level_2            = 2, 2
      level_3            = 2, 2
      level_4            = 2, 2
      level_5            = 2, 2
      level_6            = 2, 2
      level_7            = 2, 2
      level_8            = 2, 2
      level_9            = 2, 2
      level_10           = 2, 2
      //  etc.
   }
   combine_efficiency = 0.75
   efficiency_tolerance = 0.75
}

StandardTagAndInitialize{
   tagging_method = "REFINE_BOXES"
   RefineBoxes{
     level_0 = [(8,8), (23,23)]
     level_1 = [(24,24), (39,39)]
     level_2 = [(56,56), (71,71)]
     level_3 = [(120,120), (135,135)]
     level_4 = [(248,248), (263,263)]
     level_5 = [(504,504), (519,519)]
     level_6 = [(1016,1016), (1031,1031)]
     level_7 = [(2040,2040), (2055,2055)]
     level_8 = [(4088,4088), (4103,4103)]
     level_9 = [(8184,8184), (8199,8199)]
            //etc.
   }
}

LoadBalancer{
    processors = 1, 1
    use_spatial_bin_pack = TRUE
}

ModifiedBratuProblem{
   timestep = 0.0625      // time increment used for all steps
   lambda   = 6.0         // factor multiplying exponential term

   max_precond_its = 35    // maximum iterations for preconditioner 
   precond_tol = 1.0e-2    // preconditioner convergence tolerance

   preconditioner_print_flag = FALSE // should the preconditioner report residuals
}

KINSOLSolver{
    max_nonlinear_iterations = 20
    KINSOL_log_filename      = "nkLog.32x32.8"
    KINSOL_print_flag        = 3

    uses_preconditioner      = TRUE
    uses_jac_times_vector    = TRUE

    residual_stop_tolerance  = 1.0e-10
    nonlinear_step_tolerance = 1.0e-10

    max_krylov_dimension      = 20
    max_linear_solve_restarts = 4
}

SNESSolver{
    uses_preconditioner            = TRUE
    uses_explicit_jacobian         = TRUE
    absolute_tolerance             = 1.0e-10
    relative_tolerance             = 1.0e-4
    step_tolerance                 = 1.0e-6
    linear_solver_type             = "gmres"
    maximum_gmres_krylov_dimension = 20
    maximum_linear_iterations      = 50
    forcing_term_strategy          = "EWCHOICE1"
    collect_convergence_histories  = TRUE
    print_nonlinear_residuals      = TRUE
    print_linear_residuals         = TRUE
}

ImplicitIntegrator{
    initial_time = 0.0
    final_time = 1.0
    max_integrator_steps = 5
}
