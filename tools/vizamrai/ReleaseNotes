*****************************************************************************
                                Release 2.18
*****************************************************************************

        ** Updated to use the released version of VTK 4.2.1

	The build should now work with the latest VTK releases.
 


*****************************************************************************
                                Release 2.17
*****************************************************************************
* Bug Fixes
	** Depth selector was broken

	When you had a index selected for a vector quantity and switched
	to another variable that was not a vector (or if that was not a
	valid index) the data that was read in was bogus.  This was fixed.
	The index will go be reset to 0 to pick up the 0'th component if the
	current index is not valid for the new variable.


*****************************************************************************
                                Release 2.16
*****************************************************************************
* Feature Additions
	** Added vector plotting modules 
	
	Vector plotting is possible using the "Vector" option in vizamrai or 
	running the vizamrai.vector script.

	Vector plotting creates a field of vectors for 2D and 3D vector data.

	The interface allows you to specify a subregion of the domain to 
	plot the vectors.  The subregion is specified as a corner and a depth
	to create an extraction box.  At a minimum you will likely need to
	reset the depth if you want to view anything.  A likely example
	would be extracting a slice in Z; set the corner to (0,0,0) 
	and the depth to (max_x, max_y, 1).

	You can extract a subset of the vectors to plot based on a min/max
	of the magnitude of the velocity vector.  Just turn on Cropping,
	and select the min/max you want.  Things above/below will 
	be culled.

	Another feature is controlling the length of the plotted vectors.
	You can set the minimum and maximum length, the length plotted will
	be linear between these two values based on the velocity magnitude.
	Zero length vectors will not be plotted.  An example use is if you
	want all the vector lengths to be the same (say if you happen to
	be interested in direction only); set the min/max to the same value.
	The length control is in terms of the smallest grid refinement size.
	For example, 0.5 is half a cell width.  [Why?  So you don't have
	to continually reset as you look at differently scaled data].

	[I am not totally satisfied with this.  When you have a dataset
	with a large difference in cell size, some parts of the problem
	are either too small to see what is going on, or so many lines
	that it is a solid mass.  Perhaps an option to scale by the 
	patch cell size would be useful?  Comments as folks use this
	would be good.]

	Finally you can color the lines either by the magnitude of
	the velocity or make them a constant color.	

	** Window Names

	The window names are now "Vizamrai RW: <filename>" for the rendering
	window and "Vizamrai CP: <filename>" for the control panel window.
	This should make it a bit easier to identify the window you want
	when running multiple vizamrai sessions.

* Bug Fixes

	** Slice plane value
	
	The slice plane value which shows the "real" world coordinate of
	the current slice was not correctly updated during a file load.
	


*****************************************************************************
                                Release 2.15
*****************************************************************************
* Feature Additions

	** Added vector support

	The file reader now understands vector values and has a selector
	to pick the depth (index) to look at.

	** Changes for VTK 4.2 support

	Internal API changes to support latest version of VTK.


*****************************************************************************
                                Release 2.14
*****************************************************************************
* Bug Fixes

	** Slice Restore Problem

	Restoring the vizamrai state when texture mapping interpolation
	was enabled caused an error.

*****************************************************************************
                                Release 2.13
*****************************************************************************
* Feature Additions

	** Change compilation model and run scripts

	Use static VTK library generation so the scripts and run
	commands are less position dependent to enable taring up
	of a binary distribution.

*****************************************************************************
                                Release 2.12
*****************************************************************************
* Bug Fixes

	** Redraw problem with Surface Plots

	The surface plotting script was redrawing the screen twice
	when switching variables/reading a new file.  This has been
	fixed.

	** "Funny" surface plot drawing for near constant data

	For datasets with near constant data (differences near machine
	epsilon) the image was drawn very strangly in Mesa and in
	Linux nVidia OpenGL the plane would jump around during
	rotations etc.  This should be fixed.
	

	** File Reader VCR controls
	
	Should no longer get an error popup when pressing first/last
	buttons when there are no files in the list.

	** Axes visibility

	When using floating axes, the visiblity button gave an error when 
	pressed.  

	** Uniform scaling switch

	When switching to uniform scaling the screen was not 
	updated.

	** Cell boundary in uniform scaling mode

	When adding cell boundaries in uniform scaling mode they were
	added without scaling.  


* Feature Additions

	** Animation file list update

	The animation file list will be automatically loaded when you
	load a new file, this saves having to press the button.	
	
*****************************************************************************
                                Release 2.11
*****************************************************************************

* Feature Additions

	** Surface plot scaling change

	The algorithm for scaling in the surface plotting has changed.
	The surface is now plotted so that the minimum value is 
	at the slice plane.  (Previously "0" was at the slice plane).
	This is much better for looking at surface with data that 
	lies away from the 0.

*****************************************************************************
                                Release 2.10
*****************************************************************************

* Bug Fixes

	** Fixed Databrowser problem

	Datasets that are located in coordinate space with negative values
	were not positioned correctly in the databrowser window.

* Feature Additions

	** Updated to latest VTK 4.0 

	Updated from the beta version of VTK4.0 to the release version.

	** Added label formating to colorbar

	The colorbar control panel now has an option to set the 
	formating on for the label values.  This is a C printf style
	format string (e.g. %1.2e, %g, etc) 


*****************************************************************************
                                Release 2.9
*****************************************************************************

* Bug Fixes

	** Fixed colormap "flashing" problem **

	The colormap was being set to the new min/max values 
	for the old dataset when a file was loaded.  This caused 
	an invalid image to appear briefly when doing a file load.


*****************************************************************************
                                Release 2.8
*****************************************************************************

* Feature Additions
	
	** Contour Plotting **

	A contour plotting capability has been added to the slice
	modules.  The interface is pretty simple, you can control
	the visibilty, number of contour lines and the coloring
	of the lines (either a constant color or based on the 
	data).  

	The Jitter controls moves the line drawing a small bit
	either above or below the slice plane.  This can 
	eliminate some drawing problems that can occur if the
	lines are drawn directly on the slice plane.

* Bug Fixes

	** Slice plane selector not working **

	There was a bug introduced that caused the plane selector for
	the slice module to not correctly change the plane. 


*****************************************************************************
                                Release 2.7
*****************************************************************************

* Bug Fixes

	** First image/data slice data not being written **

	When using the animation button the image and data slice 
	was not being written for the first dataset.  This was 
	bug was created in Release 2.5.  

*****************************************************************************
                                Release 2.6
*****************************************************************************

* Feature Changes * 

	** Colormap Min/Max always active **

	The colormap min/max values used to uneditable when the using
	the min/max values from the dataset.  This was changed to make
	them editable at all times (the values will just be ignored).

	** Widget Changes **

	Some minor improvements to the module panels to make them look	
	a little better.

* Bug Fixes

	** Volume Rendering Update **

	VTK 4.0 changed some volume rendering features, vizamrai
	has been updated to match.

	** Renamed Bounding Box to be Patch Boundaries **

	The "BoundingBox" module is really draws patch boundaries, renamed
	it so it matches what it does.

	** Some fixes for Slice module **

	Some OpenGL implementations don't do 1D texture maps.


*****************************************************************************
                                Release 2.5
*****************************************************************************

* Feature Additions
	
	** New coloring option **

	Added a "Schlieren" colormapping option.  This was 
	requested by the ALPS team and has a couple of controls.
	[Need to document this!]

	** Log color bar **

	In the log plotting case the colorbar is now based on a 
	log scale so it looks much better.

* Bug Fixes

	** Fixed bug in range calculation **

	For datasets with very small differences the range calculation
	was setting the range to <small value> to -1.  It should
	do the correct thing now (e.g. <small value> to <slight smaller value>.

	** Automatic file loading **

	The Automatic file loading was reloading datasets at
	each time interval, even if the last file was the same.
	This was fixed so a file is only loaded if it is new.

	** Colormap entries increased **

	The default colormap was being set to only 64 entries this 
	was increased to 256 to get a smoother colormap.

	** Plotting problems **

	VTK 4.0 has fixed the problems with drawing the initial 
	colormap and the first "patch" slice.

	** Colormap change problem **

	Under some conditions switching to/from log and linear would
	not redraw the screen.

*****************************************************************************
                                Release 2.4
*****************************************************************************

* Feature Additions

	** Automatic File Updating

	There is a new checkbox in the ReadSAMRAI panel, just below the 
	VCR buttons, which makes Vizamrai automatically look for new
	files in an animation series and loads in the last file found.
	
	The idea behind this was to keep an eye on a running application
	and update the display as new files get written.

	You can change the interval for the update, it defaults to
	5 seconds.

	The user interface is active while this is going on but during
	the file check and file loads you will have a noticable delay 
	if you are doing screen interactions.

	** Busy Indicator **

	The cursor now becomes an hour-glass to signal that Vizamrai 
	is busy and working very hard.

*****************************************************************************
                                Release 2.3
*****************************************************************************

* Feature Additions

	** Mouse Wheel support **

	The MouseWheel does zoom in/zoom out under MS Windows products.  This
	does not work under Unix.

	** New buttons **

	The old buttons were ugly so some work was done making them look 
	nicer and three conrols buttons were added for navigation commands, 
	just grab one of the controls with your left mouse button 
	(hold-click and move the mouse) and it moves changes the 
	view (pan/rotate/zoom).  See the online help for more
	information.

* Bug Fixes

	** ASCI File Saving bug **

	The problem with output files in AutoSave option in the
	data extraction tool being updated at the correct
	time was reappeared.  Actually the first fix had a subtle 
	bug in it which was exposed when some timing changes occured
	in the pipeline.



*****************************************************************************
                                Release 2.2
*****************************************************************************

* Bug Fixes

	** Image save file type problem **

	The save image as different types did not work, the file type
	would always get set back to PNG type.  You should 
	be able to save as different formats now.

	NOTE:  The postscript option does not appear to work very well;
	your mileage may very.


*****************************************************************************
                                Release 2.1
*****************************************************************************

* Bug Fixes

	** Fixed problem with Single Slice data output **
	
	The single slice script was not writing out the ascii data
	file.  

	Missed some data type conversion stuff for VTK 4.0

	** Object Deallocation Problem

	Object deallocation was not being done so the order was
	being left to default cleanup routine which was doing things
	in the wrong order.  Added a deallocation step to each of the
	scripts.



*****************************************************************************
                                Release 2.00
*****************************************************************************

* New Features
	
	** VTK 4.0 **

	This version uses VTK 4.0.  This is the most significant update to
	VTK in a couple of years so be on the watch for new bugs.  

	** Image Saving Options **

	VTK 4.0 has support for several more file options, JPEG, PNG, 
	TIFF, BMP, and PostScript.  I would recommend PNG as it makes
	small files with lossless compression and is widely supported format.

* Bug Fixes

	** Number of Levels **
	If you had more than 8 levels in a file, vizamrai would die
	trying to load up the file.  The problem is related to having
	8 selector controls for the visibility controls.  The solution
	was to "wrap" around the visibilty controls (e.g. level 0 visibilty 
	controls also control level 9).  While this is probably OK 
	for the color controls (which were already doing this) it makes
	less sense for the visibility controls.  Since adding in a 
	variable number of visibilty controls falls into the "non-trivial"
	category this workaround will have to suffice for now.

*****************************************************************************
                                Release 1.44
*****************************************************************************

* Bug Fixes

	Maintanence Release


*****************************************************************************
                                Release 1.43
*****************************************************************************

* Bug Fixes

	** vizamrai.1slice ASCII output fixed **

	The output files when doing using the AutoSave option in the
	data extraction tool were being not being updated at the correct
	time so data was being written to the wrong file (it was being
	saved before the new data was loaded so information for the
	previous dataset was being saved).


*****************************************************************************
                                Release 1.43
*****************************************************************************

* New Features

	** Time added to vis files **

	A time field has been added to the .vis file.  

	The Save Slice ascii output writes out the time as the
	first field.

*****************************************************************************
                                Release 1.42
*****************************************************************************

* New Features

	** vizamrai.function script speedups **

	The data operations script vizamrai.function has been made
	much faster by removing some unneeded computations and 
	improving the logic.


*****************************************************************************
                                Release 1.41
*****************************************************************************

* New Features
	
	** Colorbar text size controls **

	The colorbar legend now has two sliders to control the font
	size.

	** Colorbar Number of Labels control ** 

	The colorbar legend now has a slider which controls the number
	of labels displayed.

	** New vizualization utility **
	
	There is not a single slicer in addition to the 3 slice 
	application.  This has the ability to write out the data
	slice to an ASCII file for processing by other utilities.

	** Data Operations module **

	A data operations module has been added which allows simple
	data manipulation between variables.  This currently
	requires some TCL scripting to make work so seek the vizamrai
	guru's for help.

*****************************************************************************
                                Release 1.40
*****************************************************************************

* New Features
	
	** Full Screen **

	A new keyboard control has been added to the render window.
	"f" will enlarge move the camera to make the 
	rendered objects as large as possible in the render area.

	The small print:
	Currently it uses a simple bounding box around everything
	that is displayed so if you have a domain shaped like a 
	cross it won't enlarge it as large as it really could be.
	Computing the bounding box for each patch has been an expensive 
	operation in VTK for some reason so I did this simplification.  

* Bug fixes

	The colorbar visibility control was broken in the last release.

	The object was not being correctly centered when switching to
	top/left/right views and when doing a "reset".

*****************************************************************************
                                Release 1.39
*****************************************************************************

* New Features

	** Render Image Size Control **

	The RenderWindow control panel has two new options.  You can
	manually specify the image size.  This should allow much better
	control over what you get out.

	There is also a check box option to "Grow render area with window".
	This controls what happens when you resize the window with the 
	window manager controls.  By default (no) when you make the window
	larger, the render area will grow to match.  If you turn this option off,
	the render area will only grow as large as the width/height values
	you have typed in.  So if you have the default size of 640 by 480
	and make the window full screen you will still have a 640 by 480 image.

	In both cases when you shrink the window smaller than the specified
	render area size, the image will shrink. [There are problems with
	trying to show only part of the image so I chose this behavior, 
	which is a bit confusing.]

	NOTE: The height/width values are NOT updated when you resize the
	      window using your window manager controls.

	** Scrollable control region **

	The control region is now scrollable so you can resize the
	window and still get access to the widgets. 


*****************************************************************************
                                Release 1.38
*****************************************************************************

* New Features

	Many new options are available for controling the color bar
	position, size and text.  

	In the "Color Table" tab there is a button that brings up a
	font selector (this is all the options VTK currently supports),
	and controls for position, size and orientation of the color
	bar.

* Bug Fixes
	
	SaveToFile button should be working again.  Was broken by 
	the last release.

	Datasets with negative origins did not display correctly.  This
	should be much improved (not sure if everything is tested).

	The databrowser did not work for some datasets.

	Latest VTK release has an improved colorbar, should fix some
	of strangly shapped colorbars and text label problems that
	have been seen.

*****************************************************************************
                                Release 1.36
*****************************************************************************

* Bug Fixes

	When using the render to image file option, the image was not
	being fully drawn before the save to file was taking place resulting
	in incomplete images.

*****************************************************************************
                                Release 1.35
*****************************************************************************

* Feature Changes

	Added control for changing colorbar legend text color.


*****************************************************************************
				Release 1.34
*****************************************************************************

* Feature Changes

	You can add up to 4 additional lights to a scene using 
	the render window panel.

	Light intensity is from 0.0 to 1.0.   0.0 will turn a light off.

	The first light is positioned at the camera, and is labeled
	as such.  It can't be moved.

	The other lights are considered to be infinite lights, in the
	sense that the light rays are parallel to objects in the scene.
	The direction of the light is controlled by an X,Y,Z point
	which is in relation to the origin (the values can be -1.0 to
	1.0).  The light rays travel parallel to this point through
	the origin.  So a light at (-1.0,0,0) would be coming from
	way off in the the negative X direction.

Bug Fixes:

	Fixed data striding problem in data reader.


*****************************************************************************
				Release 1.33
*****************************************************************************

Bug Fixes:

	Core dump was happening on new file loads.  Needed to free 
	variable storage on new file load.

	Reading file 2 times.  Variable was being loaded on new
	file load and when current variable name was being set. This
	resulted in data being read in 2 times.  


*****************************************************************************
				Release 1.32
*****************************************************************************

* Feature Changes

Data Clipping

	The file reader can now read in part of a dataset.  
	In the reader panel you can enter a clipping box and only
	patches which overlap with this clipping box will be loaded 
	in.  You can make the clipping box visibile in the render
	window and control the color.

	As with the downsizing option this only works on new file
	opens.
	
	Currently the "clipping" is on a patch by patch basis so you
	won't get a perfect square.  I wasn't sure if this feature would
	be used enough to go to the trouble of clipping stuff outside
	of the box.  That can be added.

	Warning: If you read in data from several different runs 
	the clipping box is likely going to be in the wrong place,
	way too big, or way too small.

Data Downsizing

	The file reader can now downsize the data as it is being
	read in.  The slider bars control the cells that are to 
	be skipped.
		
	This must be set BEFORE you select the file, if you want to
	downsample the current file you will have to open it again.
	It does not automatically change the size when you move the slider.
	Comments on this interface choice are welcome; reloading every time you
	move change the slider would be most annoying IMHO.

	Very useful for large datasets to get a general feel without
	chewing up huge amounts of memory.
	
Slice Plane Patch Boundary
	
	The slice plane now has controls to add patch boundaries in
	addition to the previous cell boundary option.  For larger
	data this should work better, you just get colored boundaries
	around the patches.

Slicing

	Texture mapping is now the default for slices.  This is
	much faster than using triangles but the image is a bit
	off.

Volume Visualization

	Changing the min/max and log/linear type in the color table
	module should now actually do something.

	Added a cropping box to the volume module so you can do
	the volume rendering over a subregion; great for looking
	at the inside of things.

ColorMap and AlphaMap Loading

	Since getting around to creating a colormap editor seems to be 
	taking longer than expected, support for loading colormaps has
	been added as a temporary fix.  Just use the "Load ColorMap"
	button in the ColorTable module interface.

	How do I make a different colormap?  

	There is a utility in /home/casc/bin called icol which 
	allows the interactive creation of colormaps.  There is
 	no documentation so if you need help I can demo it.  Just
	save the colormap as a "Non-indexed Ascii Text" data 
	and load that colormap file into Vizamrai (I am using
	the extension .vcmap).

	If you click on one of the color squares and then use
	the sliders at the bottom you move a point in the graph.
	
	Start up icol.  Click the color cell 0 (upper left), 
	push the "red" slider to 255.  Select cell 255 (lower right),
	push the "red" slider to 0 and the "green" slider to 0.
	Click any cell to update the colormap (a bug or feature?).
	Congrats, you have just made a red -> blue colormap!.
	Want to get some green in the middle, select a cell in the
	middle and push green to 255 and set red and blue to zero.
	Now you have the standard colormap.  Again, you probably have to
	click a cell to get the colors to update.

	Edit -> Place Knots shows which cells you have modified.
	
	You can also make more detailed changes using the "brushes"
	and pushing the line the top window using the left mouse button.  
	I found this a bit hard to control. 

	This is not ideal but is better than not being
	able to change the colormap at all :)

	I have provided a couple of colormaps in 
	/home/casc/vizamrai/colormaps, there is a greyscale and
	"default" which is like the default VTK map.

	You can also do the same thing for alpha maps (to control
	opacity).  Use the "alpha" option in the icol tool to
	construct an alpha map file (.vamap).

	icol is available at 

		http://www.arc.umn.edu/gvl-software/
	
	as part of the "bob" project.

Colormap and Alphamap controls for volume rendering
	
	Colormap/alphamap controls have been added to the
	volume render.

*****************************************************************************
				Release 1.29
*****************************************************************************

* Feature Changes

Parallel Projection Rendering Option

	There is a checkbox in the Rendering Window interface to
	change the rendering method to use parallel projection rather
	than default perspective projection.  

Picker Changer

	Since "p" is kind-a hard to hit when you are moving the
	mouse the space (spacebar) is now used in the
	render window to move the databrowser selection point.

Added Databrowser

	The databrowser lets you look at the "real" numeric
	values from the dataset.  It selects a small 2D box
	and creates a spreadsheet like display of the 
	values in a seperate window.

	To use the databrowser start the 3slice application 
	and load in your dataset.  In the DataBrowser control
	panel make the databrowser window visible by checking
	the top most checkbox "Window Visible".  The center
	of the window can be selected by moving the slider
	bars or by pointing at a point in the render window 
	and pressing the spacebar.

	The center selection point is shown in the render window
	by a small white sphere.  If the databrowser window is
	open a box showing the small 2D selection region is drawn
	in the render window to indicate where the data in the
	browser window is coming from.

	To look at data go to the "DataBrowser" panel and make the
	window visible (selector box at top of window).

	This will make a spreadsheet like window appear with the
	values from the dataset.

	Slice Plane controls which plane of data is being extracted.
	
	Center Point controls the center point of the data browser
	window.  You can also move the mouse to a point in the
	rendering window and press the "space" key.  A
	smallish white sphere is drawn in the rendering window 
	at the center point so can see where you are getting data
	from.  

	NOTE: The "space" stuff sometimes will select the patch boundary 
	so be a bit careful.  

	Windows Size controls how many cells are displayed in the
	data browser window.  

	The data browser window will try and fit the most cells it
	can in the display.  So if you are looking at only at a very coarse
	patch the cell size will be the size of cells in the coarse
	patch.  If you pick a point near the boundary between a coarse
	and fine patch the databrowser cell size will be the size of the fine
	cells.  

	The two label boxes let you specify the formating for the axis and
	data values.  This is C printf syntax.

	The keyboard arrows keys can scroll around the databrowser.

Added texture map option to slice plane

	An option has been added to use texture mapping in the
	slice plane module.  This uses OpenGL texture mapping instead
	of drawing triangles for each cell.  The result of this
	is a dramatic speed up and a reduction in memory usage.
	Currently this is turned OFF by default.

	Timings:

	Euler Room2D loading and drawing 14 frames of a single
	slice animation

	TextureMap	10.0 sec 28MB
	Triangles       28.5 sec 28MB

	1024.3level data set from ALPS

	TextureMap	       5 sec 	27MB
	Triangles	6 min 42 sec	83MB

	Warning!!!!!
	The downside of the current implementation is some
	additional averaging going on.  The cell data
	is being averaged to node locations but drawn as constant
	colored blocks around the node centers. 
	This is a bit misleading since the data is really
	an average.

	[Hint: with a small dataset just flip the TextureMap on/off
	to see this effect.]
	
	I think I have a way to get "true" cell data.

	Bugs:
	The 1st patch slice drawn is grey for some reason,  reloading
	the variable fixes this problem.  I have no clue.

User Interface Changes
	
	Several module interface widgets were modified to allow
	changes only when the widget should be active (for example
	the Texture Map Interpolate checkbox is only active in the
	slice plane when Texture Mapping is being used).

Bug Fixes:

Carpet Slice Drawing Problems

	Carpet Slice was drawn incorrectly under Sun's OpenGL.  This should
	be improved, there is still a problem when the scaling factor is set
	to 0.

Removed global variables
	
	Got rid of ugly global variables and replaced with namespaced
	items.

	Bug 42

Changed vtkFloatScalars to vtkScalars.

	vtkFloatScalars class was depricated by Kitware.

Core Dump 

	Added check for a blank image filename name when saving
	image to file.

	Bug 186
 
*****************************************************************************
				Release 1.26
*****************************************************************************

* Feature Changes

Added Vizamrai Launchpad

	A "vizamrai" application has been added which is a simple
	program launcher for the other vizamrai utilities.

Isosurface min/max changed
	The min/max values for the iso surface are now based on the
	min/max values specified in the color table rather than from
	the current dataset range.

CarpetPlot speedups

	The carpet plot routine has been redone to speed up changing
 	the scaling factor.  The new version does the scaling for the
	surface using the OpenGL HW. 

	Time in seconds to render 5 scale factor changes:

        Dataset			Old      New
	Euler Room2D             7.6      2.1
	1024.3level ALPS       945       39 

CarpetPlot Offset addition
	
	The carpet plot interface contains a field called offset.
	This value moves the carpet so you can maintain the specified
	value at slice plane location.

	To recap what the carpet plot does:

	The carpet plot takes a 2D slice plane through the 3D dataset
	and creates a surface based on the values at that slice.  The
	scale factor controls how far the data is translated (the height
	of the surface plot).  Basically 

		height(x,y) = datasetvalue(x,y)*scalefactor

	(this is not exactly what is happening since the value
	you specify in the scalefactor is scaled to make the
	numbers easier to use)

	So if you have data that goes from 1.0 to 8.0 all values will
	be translated when make the scalefactor non-zero.  This can
	make the picture a bit confusing since the data is moved
	away from the actual location of the slice plane.

	The offset value can be used to set which data value should
	be at the slice plane.  So an offset of -1.0 will keep the 1.0 
	values at the slice plane location (for the 1.0 to 8.0 dataset).
	If you set it to -4.5 the surface plot will be centered at the 
	slice plane location.

	This all sounds confusing to me, I think if you take a simple
	dataset and just play around with the offset value it will
	become obvious what it is doing.

	Should I rename this value to be something like "center value"?
	
Removed Unused Checkbox

	The "Autoscale" checkbox has been removed from the 
	CarpetSlice interface since setting scaling = 1.0 did
	the same thing.

Line Drawing changes
	
	The technique to draw the bounding lines has been improved.  
	The line width is scaled based on the image size so as you 
	zoom in they don't end up filling the entire screen.

	Bug 128

Setting of colors and visibility for slice plane cell boundaries

	Added the ability to set the color and visibility by level for
	the cell boundaries for the slice plane module.

* Bug fixes

Resolved some problems with constant data

	When a dataset was constant the colormap was causing 
	errors to be generated.  These errors should be 
	gone.

Fixed visibilty selectors in slice plane and bounding box

	The visibility checkboxes did work when changing the global
	visibility when only a selected set of levels were set to
	be visible. 

Performance Slowdown

	Recent changes introduced a large slowdown when changing
	variables, reading in new dataset etc.  This has been fixed.


*****************************************************************************
				Release 1.24
*****************************************************************************
* Feature Changes

Save/Restore State

	This release contains the ability to save and restore 
	the state of vizamrai.  Just go to the File menu
	and select SaveAs to save the state to a file and
	Open to open an existing file.

	You can add the "-restart filename" option to the command
	line to restart from a saved state when starting vizamrai.

	Bug 36

User Defined Camera Views

	There are now 3 additional buttons which are for storing 
	user camera views.  If you click with the right mouse button
	it will copy the current view to that button.  Left click
	will retrieve the save state.


Some additional sections have been added to the users manual.

* Install Changes

	Added script which can be used to reset the absolute
	pathnames in the scripts after an install.

	Go to the bin directory and do "sh ./install.sh" to fixup
	the path names.

*****************************************************************************
				Release 1.23
*****************************************************************************

* Bug Fixes:

	Updated scripts to work on RedHat Linux.

=============================================================================
				Old Release Notes
=============================================================================

Release 1.22

Clipping Planes

	Some work on clipping plane problem. 

	If you continue to see it please report it. 

Release 1.21

* Feature Changes:

OffScreen RenderMode VTK fix.

	The VTK folks have somewhat fixed the problem when coming out of
	offscreen rendering.
	Just select the "Off Screen Rendering" 
	checkbox and rendering will happen in memory.  This feature
        is probably only useful if you also "Save on New Load" to
	create image files when when doing a movie.

	When you are done rendering to images deselect the
	"Off Screen Rendering" option.  If you are lucky the 
	image will redraw.  If not resize the window and things
	should refresh (a hack but it is getting better, previous
	releases would require restarting vtk)

	Why this is needed.

	When using OpenGL the screen buffer is used to store the
	image so if you put a window over the render window and
	save it you will get the overlapped window in your saved 
	image.  Probably not what you want.  Use the OffScreen mode 
	when creating movies to allow it to run in background. 


Moved colormap scalar range to ColorTable.

	The min/max values for color plotting have been moved to the
	ColorTable control tab from the SamraiReader.  This makes
	more sense and fixes the problem of changing the min/max value
	for the color causing the carpet plot surface to change.

* Bug Fixes

Drawing problems with Axes
	
	The "floating" axes option was causing problems with other
	display objects not getting redrawn.  The default axes type
	is back to the old style.  If you switch to the "floating"
	style you may need to force all screen objects to redraw
	(you can do this by going into and out of wireframe mode). 

CarpetPlot Scaling Fixes.

	A bug was fixed in the CarpetPlot scaling routine.  Should
	fix the problems of scaling values being all over the place
	when changing variables.
	
Fixes for colorbar drawing problems.
	
	Added some hacks to get colorbar to draw correctly more
	frequently.  Bug #160, Bug #15

Fixed screen update problems

	When changing axis type and visibility. Bug #159
	
	When changing min/max values in data reader.

* Internal changes

	Renamed ScalarRange to Table range for color table controls

Release 1.20

* Feature Changes:

"Real" patch boundaries

	Bounding box can now be drawn around the original patch
	boundaries from SAMRAI by writing them to the vis file.  See
	Euler example program on what to write to the file.

	Bug #21

	The code which dumps patch boundaries:

	The dumpPatchBoundaries can be added just after the 
	other processor 0 header information.  Also change the
	file format to "-4".  Here is what changed in 
	main.C from Euler:

if (tbox_SAMRAI_MPI::getRank() == 0) {


      // Write viz data as floats
   //*******************************************************************
   //******************************************************************* 
   // Change Change Change Change Change Change Change Change Change 
   //*******************************************************************
      file << -4;          // file format version 4
      file << noutput;	   // number of blocks in data file
      file << 1;    

	.........
	
     file.writeString("Pressure");

      // Write the number of levels (all that are possible, not just
      // the ones in this file) and scale factor to level 0
      IntVector dratio(1);
      file << gridding_algorithm->getMaxLevels();

      for( int l4 = 1; l4 < nlevels; l4++ ) {
	 const IntVector lratio = 
            gridding_algorithm->getRatioToCoarserLevel(l4);
	 // multiply by previous to the ratio to level 0
	 dratio *= lratio;
	 file.pack((const int *) dratio, NDIM);
#if (NDIM == 2)
         file << 1;
#endif
      }
   }

   //*******************************************************************
   //******************************************************************* 
   // ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD
   //*******************************************************************

   dumpPatchBoundaries(file, hierarchy);

   /*
    * Tell Euler model to write variable data to file.
    */

   Pointer<VariableContext> context =
      VariableDatabase::getDatabase()->getContext("CURRENT");

   for (int l5 = 0; l5 < nlevels; l5++) {
      Pointer<PatchLevel> level = hierarchy->getPatchLevel(l5);
      for (PatchLevel::Iterator i(level); i; i++) {
         euler_model->writeData(level->getPatch(i()), l5,
                                context,
                                outboxes[l5], file);
      }
   }


   //*******************************************************************
   //******************************************************************* 
   // ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD ADD
   //*******************************************************************
void dumpPatchBoundaries(
   FileStream &file,
   Pointer<PatchHierarchy> hierarchy)
{
  const int nlevels = hierarchy->getNumberLevels();

  int noutput = 0;

  if (tbox_SAMRAI_MPI::getRank() == 0) {  
     for (int l3 = 0; l3 < nlevels; l3++) {
	const BoxArray& boxes = hierarchy->getPatchLevel(l3)->getBoxes();
	noutput += boxes.getNumberOfBoxes();
     }
     
     file << noutput;
  }

  for (int l5 = 0; l5 < nlevels; l5++) {
     Pointer<PatchLevel> level = hierarchy->getPatchLevel(l5);
     for (PatchLevel::Iterator i(level); i; i++) {
	const Pointer<Patch> patch = level -> getPatch(i());
	const Box& box = patch -> getBox();
	const Pointer<CartesianPatchGeometry> geometry = 
	   patch -> getPatchGeometry();
	const double* xlo = geometry->getXLower();
	const double* xup = geometry->getXUpper();
	
	if (tbox_SAMRAI_MPI::getRank() == 0) {  

	   noutput--;

	   
	   int j4;
	   for (j4 = 0; j4 < NDIM; j4++) {
	      const double corner = xlo[j4];
	      file << corner;
	   }
#if (NDIM==2)
	   file  << 0.0;
#endif
	   
	   for (j4 = 0; j4 < NDIM; j4++) {
	      const double corner = xup[j4];
	      file << corner;
	   }
#if (NDIM==2)
	   file  << 1.0;
#endif
	   file << l5;
	}
	else {
	   double buffer[NDIM*2+1];
	   int buffer_count = 0;
	   
	   int j4;
	   for (j4 = 0; j4 < NDIM; j4++) {
	      buffer[buffer_count++] = xlo[j4];
	   }

	   for (j4 = 0; j4 < NDIM; j4++) {
	      buffer[buffer_count++] = xup[j4];
	   }

	   buffer[buffer_count++] = l5;
	   MPI_Send(buffer, NDIM*2+1, MPI_DOUBLE, 
		    0, 0, tbox_SAMRAI_MPI::getCommunicator());
	}
     }
  }

  MPI_Status status;

  while(noutput) {
     double buffer[NDIM*2+1];
     noutput--;
     MPI_Recv(buffer, NDIM*2+1, MPI_DOUBLE, MPI_ANY_SOURCE, 0,
	      tbox_SAMRAI_MPI::getCommunicator(), &status);

     int j4;
     for (j4 = 0; j4 < NDIM; j4++) {
	file << buffer[j4];
     }
#if (NDIM==2)
     file  << 0.0;
#endif

     for (j4 = 0; j4 < NDIM; j4++) {
	file << buffer[j4+NDIM];
     }

#if (NDIM==2)
     file  << 1.0;
#endif


     file << (int)buffer[NDIM*2];
  }
}

  
Log color mapping

	The vizamrai.3slice module not supports both log and linear
	color mappings.  Choose Linear or Log under the "ColorTable"
	controls.

	Warning: This is still somewhat beta and only works 
	on the 3slice module. The "visible" button currently
	does nothing (but will soon turn the "colorbar" of/on
	in the display).

Axes Controls

	A new Axes drawing module has been added.  It labels
	the X,Y,Z axis and scales itself so that it is always
	in view.  It also draws tick marks with values. 
	Unfortunately I have to scale SAMRAI coordinates 
	so the values are scaled and don't really 
	mean anything :(

	You can switch to the old version if from the
	Axes control panel.

	I'm not sure I like either of these two Axes modules
	so if you have ideas on what you would like to see
	send me email.
	
Performance Improvements

	Improved performance by avoiding replicating work by
	using an internal task queue.

	Some examples of improvements for output from Euler 2D 
	example code, doing an animation of the first 15 frames:

	Single slice:    45 seconds reduced to  31 seconds
	Carpet slice:   155 seconds reduced to  54 seconds
	Volume:         140 seconds reduced to 100 seconds

	Interactive performance should be better in some cases
	as well.

	Bug #43

Added color selection and visibility for each patch level

	For the bounding box and the carpet slicer you can set the
	color and visibility for each patch level independently.

	Useful if you just want to highlight a single patch level or
	if colors have conflicts.

	Note:  The colors/visibility is not global but set separately
	for the bounding boxes and the carpet slice.  This was done
	on purpose, if users want a single setting this could be done.

	Bug #130
	Bug #40

Button Bar

	Added a button bar for rendering controls, view, save image etc.
	
	Button bar balloon help will come up if you leave the mouse over
        a button for a second or two.

Wireframe Rendering Option

	You can set the screen display to render only "wireframe"
	or the full image.

	This can be useful for large datasets.

	The mode is toggled using the Wireframe/Full rendering
	button.

Render Pipeline and Rendering button

	For large datasets you can turn off the screen rendering.
	Use this to make changes to slice planes, min/max values, etc
	without having to wait for a screen update after each change.

	Camera motion is still being done but you won't see screen
	updates.  

	The "Render" button forces a render to occur to check on
	your changes.

	The rendering pipeline can be turned on/off using the
	Rendering Pipeline button.

	Bug #131

Added "OffScreenRendering" option (BETA)
	
	On the RenderWindow Interface panel there is an option to do 
	offscreen rendering.  This helps solve the problem when using
	OpenGL which renderings directly to the screen so you pick up
	overlapping windows.

	This only works with the Mesa version, not with the OpenGL hardware
	verions.

	Bugs:

	This is NOT reversible at the moment, once you click on the button, 
	deselecting does not go back.  

	Text labeling does not seem to display.

	How to use this feature:

	1) Go to the SAMRAI reader panel and load in the file set you want
	   to loop over.

	2) Get everything in the image the way you want it.

	3) Select the option to "Save On Image Load" in the Render
	   Window interface panel

	4) Select the OffScreenRendering option in the Render Window
	   interface panel

	5) Press the "play" button to loop though the images.
	
	If you want to interact again, restart vizamrai.  Yes
	this is a really annoying "feature" :)

FileBrowser Saves Directory
	
	The file browser should now save the last directory you
	saving/opening a file from rather than going back to the
	current working directory.
	
	Bug#22

New Render Window Keyboard Shortcut

	Typing "o" in the render window will save the current render
	image to the file indicated in the control panel.  

	This is often used when you are in fullscreen mode and want to
	save this image since many OpenGL renderers render directly to the
	screen buffer you will pick up any overlapping windows that cover the
	render window.
	
	Bug#126

Rendering background color selector

	You can set the background color for the rendering window using
	the color selector in the renderer control panel.

	Bug #123

Carpet Plot Change

	The slider controller for the carpet plot now is an understandable
	value :)

	1 = carpet plot is approximately the height of the largest
	bounding dimension.  So if your problem is 100x1000x100 units 
	(the size of your domain in the SAMRAI input file) then 
	height of the carpet at 1 will be about 1000 units, at 2 it will
	be about 2000 units.

	This should be much better than the previous scale factor which
	changed when you changed input domains.

	Setting to 1 is equivalent to the "autoscale" value.  Setting
	autoscale on just sets the value to 1.  I will remove the autoscale
	click box since it is now not necessary (in a later release just to
	make sure the new scheme works).

* Bug Fixes:

Slice Changes
	
	More fixes to the slice plane intersection routines.  These
	should fix the problems when reading data and having the
	image resize on the screen.

	Bug #92

File reload when filelist is generated

	The file is no longer reloaded when you press the button
	to generate the animation list in the file reader.
	
	Bug #132


=============================================================================
Release 1.14

* Feature Changes:

Slice plane intersection improvements

	The slicer controls are now done based on the cells in terms
	of the background grid (slider value 5 = intersecting the
	5th cell in the middle).  This should improve the alignment
	of intersecting planes.  The real space value is displayed in
	the upper left of the slider control pane.

	Some problems existed which would yield "no polydata messages" and
	other warning messages from VTK have been fixed.

* Bug Fixes:

Redraw Rate Problem
	
	Images were not getting redrawn correctly for large datasets,
	the LOD points remained after a move.

	Changed the default redraw rate to very low value so it should
	force a correct image to be created.


Performance Improvement

	Things should run faster for datasets with large numbers
	of patches.

	The vtkRenderer method GetActors reconstructs a linked list
	each time it is called.  The old implementation was calling this
	each time an actor (screen object) was needed.  The new implementation
	call this function only once per vizamrai object (e.g. slice plane).
	
	This has cut the load time for a dataset with 2886 patches from
	well over an hour down to about 3 minutes.

=============================================================================
Release 1.12

A single page of online documentation.

        The is an online reference to the commands available in the
        display window.  OK doesn't sound like much but it is a start.

VTK31 fix.
        
        The latest version of VTK uses cutting planes more precisely than
        previous versions and some additional logic was need to correctly
        reset the planes when doing zooming.  This should eliminate the
        current bug of loosing parts of your dataset when you zoom in.

Added Rubber Band Zooming.

        You can hold down the shift key + right mouse button to draw a
        zoom box.  This was grabbed from some VTK code and seems to have
        some strange behavior when you get closer to the model; it seems
        to take smaller and smaller zooming steps.  It is still handy if 
        you want to zoom and center in one step.

=============================================================================
Release 1.11

Changed building process
	
	Previous release used a custom linking method to build 
	the SAMRAI VTK C++ classes; starting with this release 
	we integrate our code into the VTK build process.  This
	means you have to copy some files to the VTK directories
	but should make it it easier to build.  See the INSTALL
	file in the vizamarai directory for build instructions.

Added vis file format 3.

        You can now save data as floats instead of doubles for
	visualization to save space on output files.  Vizamrai 
	only handles floats [VTK limitation] so this costs
	nothing in the end.    

	See the Euler example application for how to write out
	the float data.  You need to change three things:
	1) The file format should be -3 (first integer in file)
	2) The 3rd integer in the file is the datatype 0=double
	    1 = float.
        3) Change the data being written to float 

=============================================================================
SAMRAIVIS Release 1.10

Updated to VTK 3.1, TCL/TK 8.3, ITCL 3.1

Fixed bug 89
	Errors produced when changing from node averaged back to cell data

Reduced Memory 

 	Previously data in a file was not removed from memory until
	you moved to another file.  This has been changed to free 
	memory when you switch variables so only one variable is kept
	in memory at a time.  This will slow performance but will
	make things much better for medium sized datasets.

