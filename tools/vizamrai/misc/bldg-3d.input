//
// File:        box-3d.input
// Package:     SAMRAI application
// Copyright:   (c) 1997-2000 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1704 $
// Modified:    $LastChangedDate: 2007-11-13 16:32:40 -0800 (Tue, 13 Nov 2007) $
// Description: Input file for SAMRAI Euler example problem (3d sphere)
//

#include "euler_const.input"

//
// NOTE: See "euler_const.input" for Euler input parameters
//

Euler {
   gamma            = 1.4      // gamma = Ratio of specific heats

   godunov_order    = 4

   flux_method      = APPROX_RIEM_SOLVE
// flux_method      = EXACT_RIEM_SOLVE

   corner_transport = CORNER_TRANSPORT_2

   // Gradient detector tolerance paramaters
   grad_onset        = 0.85
   grad_tol          = 2.5 

   data_problem      = SPHERE

   Initial_data {
      radius            = 2.0  
      center            = 76.0 , 28.0 , 36.0

      density_inside    = 8.0
      velocity_inside   = 0.0 , 0.0 , 0.0
      pressure_inside   = 40.0

      density_outside    = 1.0
      velocity_outside   = 0.0 , 0.0 , 0.0
      pressure_outside   = 1.0

   }

   Boundary_data {
      boundary_node_x0y0z0 = FLOW
      boundary_node_x1y0z0 = FLOW
      boundary_node_x0y1z0 = FLOW
      boundary_node_x1y1z0 = FLOW
      boundary_node_x0y0z1 = FLOW
      boundary_node_x1y0z1 = FLOW
      boundary_node_x0y1z1 = FLOW
      boundary_node_x1y1z1 = FLOW

      boundary_face_x0 {
         boundary_type      = SYMMETRIC
         velocity          = 3.0 , 0.0 , 0.0
         pressure          = 1.0
         density           = 1.4
      }
      boundary_face_x1 {
         boundary_type      = SYMMETRIC
      }
      boundary_face_y0 {
         boundary_type      = SYMMETRIC
      }
      boundary_face_y1 {
         boundary_type      = SYMMETRIC
      }
      boundary_face_z0 {
         boundary_type      = SYMMETRIC
      }
      boundary_face_z1 {
         boundary_type      = SYMMETRIC
      }
   }

}

Main {
// log file parameters 
   log_file_name    = "bldg-3d.log"
   log_all_nodes    = TRUE

// visualization dump parameters 
   viz_dump_interval     = 1         // zero to turn off
   viz_dump_dirname      = "viz_bldg3d"
   viz_dump_filename     = "bldg3d"

// restart dump parameters 
   restart_interval        = 5        // zero to turn off
   restart_write_dirname   = "restart_sphere3d"
}

TimerManager {
   print_exclusive      = TRUE   
   print_timer_overhead = TRUE   
   timer_list               = "apps::*::*",
                              "algs::*::*",
                              "xfer::*::*",
                              "hier::*::*",
                              "mesh::*::*"
}

CartesianGeometry {
   domain_boxes   = [ (0,0,0)   , (47,31,71) ],
                    [ (48,16,0) , (55,31,71) ],
                    [ (48,0,0)  , (71,7,71) ],
                    [ (56,24,0) , (63,31,71) ],
                    [ (64,16,0) , (71,39,71) ],
                    [ (72,0,0)  , (87,63,71) ],
                    [ (88,0,0)  , (111,15,71) ],
                    [ (112,0,0) , (127,63,71) ],
                    [ (0,32,0)  , (7,47,71) ],
                    [ (32,32,0) , (55,39,71) ],
                    [ (32,40,0) , (47,47,71) ],
                    [ (0,48,0)  , (71,63,71) ],
                    [ (88,40,0) , (111,63,71) ],
                    [ (8,32,40) , (31,47,71) ],
                    [ (48,8,32) , (71,15,71) ],
                    [ (56,16,32) , (63,23,71) ],
                    [ (56,32,32) , (63,39,71) ],
                    [ (48,40,32) , (71,47,71) ],
                    [ (88,16,56) , (111,39,71) ]
   x_lo           = 0.e0 , 0.e0 , 0.e0    // lower end of computational domain.
   x_up           = 128.e0 , 64.e0 , 72.e0 // upper end of computational domain.
}

GriddingAlgorithm {
   max_levels             = 3        // Maximum number of levels in hierarchy.
   ratio_to_coarser {            // vector ratio to next coarser level
      level_1             = 2 , 2 , 2
      level_2             = 2 , 2 , 2
   }

   largest_patch_size {
      level_0 =  19, 19, 19  // largest patch allowed in hierarchy
           // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 =  8, 8, 8 
      // all finer levels will use same values as level_0...
   }

   efficiency_tolerance   = 0.70e0    // min % of tag cells in new patch level
   combine_efficiency     = 0.85e0    // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

HyperbolicLevelIntegrator {
   cfl                      = 0.9e0    // max cfl factor used in problem
   cfl_init                 = 0.1e0    // initial cfl factor
   lag_dt_computation       = TRUE
   use_ghosts_to_compute_dt = TRUE
}

TimeRefinementIntegrator {
   start_time            = 0.e0     // initial simulation time
   end_time              = 100.e0   // final simulation time
   grow_dt               = 1.1e0    // growth factor for timesteps
   max_integrator_steps  = 50     // max number of simulation timesteps
}

NonUniformLoadBalance {
   use_spatialBinPack = TRUE
}

UniformLoadBalance {
   use_spatialBinPack = TRUE
}
