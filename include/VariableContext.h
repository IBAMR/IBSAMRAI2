//
// File:	$URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/source/hierarchy/variables/VariableContext.h $
// Package:	SAMRAI hierarchy
// Copyright:	(c) 1997-2008 Lawrence Livermore National Security, LLC
// Revision:	$LastChangedRevision: 2132 $
// Modified:	$LastChangedDate: 2008-04-14 14:51:47 -0700 (Mon, 14 Apr 2008) $
// Description: Simple integer id and namestring variable context 
//

#ifndef included_hier_VariableContext
#define included_hier_VariableContext

#include "SAMRAI_config.h"
#ifndef included_String
#include <string>
#define included_String
#endif
#include "tbox/DescribedClass.h"


namespace SAMRAI {
   namespace hier {

/**
 * Class VariableContext is a simple class that is used to manage 
 * variable storage in a meaningful, customizable manner.  A variable 
 * context has a name string and a unique integer instance identifier.
 * Context objects are typically generated and used by the variable database 
 * for mapping names to storage locations, but they may also be created
 * independently of the variable database.  
 * 
 * SAMRAI applications use contexts and the variable database to manage 
 * patch storage locations for variables.  For example, an integration 
 * algorithm may require multiple unique contexts to manage storage 
 * for a problem variable, such as "OLD" and "NEW".  The algorithm 
 * interacts with the database to obtain the contexts and the mapping
 * between the context and the patch descriptor index to access data on the 
 * patch hierarchy.
 *
 * \verbatim
 * Important note:
 *
 *    It is strongly recommended that context objects be generated by 
 *    the variable database and obtained via the getContext() function.
 *    While contexts can be created by using the variable context 
 *    constructor directly and used with the database, this may produce 
 *    unexpected results due to potentially improperly generated and name 
 *    string context identifiers.
 *
 * \endverbatim
 *
 * @see hier::VariableDatabase
 */

class VariableContext : public tbox::DescribedClass
{
public:
   /**
    * Return the current maximum instance number over all variable 
    * context objects.  The instance identifiers returned from variable
    * context objects are guaranteed to be between 0 and this number minus 
    * one.  Note that this number changes as new variable contexts are created.
    */
   static int getCurrentMaximumInstanceNumber();

   /**
    * The variable context constructor creates a context with the given 
    * name and increments the context index counter.  
    *
    * When assertion checking is active, an unrecoverable assertion results
    * when the name string is empty.
    */
   VariableContext(const std::string& name);

   /**
    * The virtual destructor does nothing interesting.
    */
   virtual ~VariableContext();

   /**
    * Return integer index for VariableContext object.
    */
   int getIndex() const;

   /**
    * Return name string identifier for VariableContext object.
    */
   const std::string& getName() const;

   /**
    * Check whether two contexts are the same.  Return true if the
    * index of the argument context matches the index of this context object.
    * Otherwise, return false.
    */
   bool operator==(const VariableContext& other) const;

private:
   VariableContext(const VariableContext&);   // not implemented
   void operator=(const VariableContext&);         // not implemented

   static int s_instance_counter;

   std::string d_name;
   int    d_index;

};

}
}

#ifndef DEBUG_NO_INLINE
#include "VariableContext.I"
#endif

#endif
