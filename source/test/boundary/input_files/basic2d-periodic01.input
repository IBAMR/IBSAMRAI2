//
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/source/test/boundary/input_files/basic2d-periodic01.input $
// Package:     SAMRAI tests
// Copyright:   (c) 1997-2008 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1917 $
// Modified:    $LastChangedDate: 2008-01-25 13:28:01 -0800 (Fri, 25 Jan 2008) $
// Description: input file for testing 2d reflect & periodic boundary conditions
//

GlobalInputs {
   call_abort_in_serial_instead_of_exit = FALSE
}

Main {
    log_file_name    = "basic2d-periodic01.log"
    num_domain_boxes = 2 , 1
}

CartesianGridGeometry {
   domain_boxes = [ (0,0) , (7,3) ]
   x_lo         = 0.e0 , 0.e0   // lower end of computational domain.
   x_up         = 1.e0 , 0.5e0   // upper end of computational domain.
   periodic_dimension = 0, 1
}

BoundaryDataTester {

   //
   // Variable information is read in by the BoundaryDataTester object
   // Each variable has its own sub-database which must contain the proper
   // variable information.  The name of each sub-database for a variable 
   // is arbitrary.  But the names must be distinct.  Also the names of the
   // individual variables must be distinct.
   //
   //    Required input:  name
   //                     interior_values    (# of values must = depth)
   //    Optional input:  depth              (default = 1)
   //                     num_ghosts         (default = 1,1)
   //

   variable_1 {
      name            = "var1"
      depth           = 1
      num_ghosts      = 2 , 2
      interior_values = 1.0
   }

   variable_2 {
      name            = "var2"
      depth           = 2
      num_ghosts      = 1 , 1
      interior_values = 2.0 , 3.0
   }

   //
   // Boundary conditioninformation is read in by the BoundaryDataTester object
   // Each boundary type and location has its own sub-database which must be 
   // named properly and contain valid boundary information.
   // 
   // Valid boundary_condition entries for edges in 2d are:
   //     "FLOW", "REFLECT", "DIRICHLET", "NEUMANN"
   //
   // Valid boundary_condition entries for nodes in 2d are:
   //     "*FLOW", "*REFLECT", "*DIRICHLET", "*NEUMANN"
   // Here, "*" may be either "X" or "Y".  The condition given for a node
   // must match that of the appropriate adjacent edge.  This is enforced 
   // for consistency.  Note that when a REFLECT edge condition is given 
   // and the other adjacent edge has either a FLOW or REFLECT condition, 
   // the resulting node boundary values will be the same regardless of 
   // which edge is used.
   //
   // Boundary data must be given for each edge and node in a non-periodic 
   // direction.  Any input values given for periodic directions will be ignored.
   //
   //
   Boundary_data {
      boundary_edge_xlo {
         boundary_condition      = "DIRICHLET"
         var1                    = 0.0
         var2                    = 1.0 , 2.0
      }
      boundary_edge_xhi {
         boundary_condition      = "DIRICHLET"
         var1                    = 0.0
         var2                    = 1.0 , 2.0
      }

   }

}
