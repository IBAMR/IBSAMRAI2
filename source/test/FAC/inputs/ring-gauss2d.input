// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/source/test/FAC/inputs/ring-gauss2d.input $
// Package:     SAMRAI tests
// Copyright:   (c) 1997-2008 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1917 $
// Modified:    $LastChangedDate: 2008-01-25 13:28:01 -0800 (Fri, 25 Jan 2008) $
// Description: Input file for FAC solver tests.

Main {
  base_name = "ring-gauss2d"
  do_plot = TRUE
  max_cycles = 15
  residual_tol = 3e-10
  pre_sweeps = 1
  post_sweeps = 3
  max_adaptions = 3
  target_l2norm = 2e-3
}

AdaptivePoisson {
  fac_algo = "default"
  problem_name = "gauss"
  ScalarPoissonOps {
    enable_logging = TRUE
    coarse_solver_choice = "hypre"
    coarse_solver_tolerance = 1e-14
    coarse_solver_max_iterations = 10000
    smoothing_choice = "redblack"
    cf_discretization = "Ewing"
    prolongation_method = "LINEAR_REFINE"
  }
  sine_solution {
    SinusoidFcnControl = "{ nx=1.0 px=0.0 ny=1.0 py=0.0 }"
  }
  gaussian_solution {
    GaussianFcnControl = "{ lambda=-10 amp=1 cx=0.5 cy=0.5 }"
  }
  polynomial_solution {
    QuarticFcnControl = "{ 6=1 8=-1 9=-1 12=1 }" // Pernice's problem
  }
  // finest_plot_level = 0
  adaption_threshold = .0300
}


CartesianGridGeometry {
  domain_boxes = [(0,0), (16,16)]
  // domain_boxes = [(0,0), (16,4)], [(12,5), (16,16)], [(0,12), (11,16)], [(0,5), (4,11)]
  x_lo         = 0, 0
  x_up         = 1, 1
}

StandardTagAndInitialize {
  tagging_method = "GRADIENT_DETECTOR"
}

LoadBalancer{
  processors = 1, 1
  use_spatial_bin_pack = TRUE
}

GriddingAlgorithm{
   max_levels = 4
   largest_patch_size {
      level_0 = 4096, 4096
      // all finer levels will use same values as level_0...
   }

 smallest_patch_size {
      level_0 = 4,4
      // all finer levels will use same values as level_0...
   }
   ratio_to_coarser {
      level_1            = 3, 3
      level_2            = 3, 3
      level_3            = 3, 3
      level_4            = 3, 3
      level_5            = 3, 3
      level_6            = 3, 3
      level_7            = 3, 3
      //  etc.
   }
   combine_efficiency = 0.85
   efficiency_tolerance = 0.85
}


TimerManager{
  timer_list = "solv::FACPreconditionerX::*", "solv::ScalarPoissonFacOpsX::*", "solv::CartesianRobinBcHelperX::setBoundaryValuesInCells()_setBcCoefs()"
  print_user = TRUE
  // print_timer_overhead = TRUE
}
