##
## File:	$URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/source/test/nonlinear/Makefile.in $
## Package:	SAMRAI applications
## Copyright:	(c) 1997-2008 Lawrence Livermore National Security, LLC
## Revision:	$LastChangedRevision: 2181 $
## Modified:	$LastChangedDate: 2008-05-06 11:04:30 -0700 (Tue, 06 May 2008) $
## Description:	makefile for nonlinear solver test
##

SAMRAI	      = @top_srcdir@
SRCDIR	      =	@top_srcdir@/examples/nonlinear
SUBDIR        = source/test/nonlinear
VPATH	      =	@top_srcdir@/examples/nonlinear
TESTTOOLS     = ../testtools
OBJECT        = ../../..

default: check	

include $(OBJECT)/config/Makefile.config

CPPFLAGS_EXTRA= -DDISPLAY -DNDIM=$(PDIM)  -DTESTING=1
#LDFLAGS_EXTRA= --link_command_prefix "/usr/local/bin/purify4.5 -best-effort"

CXX_OBJS      = main.o ModifiedBratuProblem.o  tbox_Pointer-CellPoissonFACSolver-NDIM.o tbox_Pointer-ModifiedBratuProblem.o
FXD_OBJS      = FACjacobian.o bcFluxCopy.o bcFluxFix.o bratufunc.o err.o evalBratu.o evalDiffusionCoef.o evalExponential.o evalF.o evalFaceFluxes.o evalJv.o evalSource.o setbc.o
F1D_OBJS      = $(FXD_OBJS) adjcrsfineoffdiag.o
F2D_OBJS      = $(FXD_OBJS)
F3D_OBJS      = $(FXD_OBJS)

NUM_TESTS = 2

TEST_NPROCS = @TEST_NPROCS@

main2d:
		if test -f stamp-3d; then $(MAKE) clean; fi
		touch stamp-2d
		$(MAKE) PDIM=2 main-2d

main-2d:	$(CXX_OBJS) $(F2D_OBJS) $(LIBSAMRAIDEPEND)
		$(CXX) $(CXXFLAGS) $(LDFLAGS) $(CXX_OBJS) $(F2D_OBJS)	\
		$(LIBSAMRAI2D) $(LIBSAMRAI) $(LDLIBS) -o main2d

main3d:
		if test -f stamp-2d; then $(MAKE) clean; fi
		touch stamp-3d
		$(MAKE) PDIM=3 main-3d

main-3d:	$(CXX_OBJS) $(F3D_OBJS) $(LIBSAMRAIDEPEND)
		$(CXX) $(CXXFLAGS) $(LDFLAGS) $(CXX_OBJS) $(F3D_OBJS)	\
		$(LIBSAMRAI3D) $(LIBSAMRAI) $(LDLIBS) -o main3d

clean-check:
		$(SAMCLEAN)

clean:		clean-check
		$(RM) *.o *.f main2d main3d

redo:
		$(RM) *.o main2d main3d core *.ii *.int.c
		$(RM) -r ti_files ii_files

include $(SRCDIR)/Makefile.depend

FORTRAN       = $(SRCDIR)/fortran/$(PDIM)d
M4DIRS        = -DFORTDIR=$(FORTRAN) $(SAMRAI_M4_FLAGS)

FACjacobian.o:	$(FORTRAN)/FACjacobian.m4
		$(M4) $(M4DIRS) $(FORTRAN)/FACjacobian.m4 > FACjacobian.f
		$(F77) $(FFLAGS) -c FACjacobian.f -o $@

adjcrsfineoffdiag.o:	$(FORTRAN)/adjcrsfineoffdiag.m4
		$(M4) $(M4DIRS) $(FORTRAN)/adjcrsfineoffdiag.m4 > adjcrsfineoffdiag.f
		$(F77) $(FFLAGS) -c adjcrsfineoffdiag.f -o $@

bcFluxCopy.o:	$(FORTRAN)/bcFluxCopy.m4
		$(M4) $(M4DIRS) $(FORTRAN)/bcFluxCopy.m4 > bcFluxCopy.f
		$(F77) $(FFLAGS) -c bcFluxCopy.f -o $@

bcFluxFix.o:	$(FORTRAN)/bcFluxFix.m4
		$(M4) $(M4DIRS) $(FORTRAN)/bcFluxFix.m4 > bcFluxFix.f
		$(F77) $(FFLAGS) -c bcFluxFix.f -o $@

bratufunc.o:	$(FORTRAN)/bratufunc.m4
		$(M4) $(M4DIRS) $(FORTRAN)/bratufunc.m4 > bratufunc.f
		$(F77) $(FFLAGS) -c bratufunc.f -o $@

err.o:	$(FORTRAN)/err.m4
		$(M4) $(M4DIRS) $(FORTRAN)/err.m4 > err.f
		$(F77) $(FFLAGS) -c err.f -o $@

evalBratu.o:	$(FORTRAN)/evalBratu.m4
		$(M4) $(M4DIRS) $(FORTRAN)/evalBratu.m4 > evalBratu.f
		$(F77) $(FFLAGS) -c evalBratu.f -o $@

evalDiffusionCoef.o:	$(FORTRAN)/evalDiffusionCoef.m4
		$(M4) $(M4DIRS) $(FORTRAN)/evalDiffusionCoef.m4 > evalDiffusionCoef.f
		$(F77) $(FFLAGS) -c evalDiffusionCoef.f -o $@

evalExponential.o:	$(FORTRAN)/evalExponential.m4
		$(M4) $(M4DIRS) $(FORTRAN)/evalExponential.m4 > evalExponential.f
		$(F77) $(FFLAGS) -c evalExponential.f -o $@

evalF.o:	$(FORTRAN)/evalF.m4
		$(M4) $(M4DIRS) $(FORTRAN)/evalF.m4 > evalF.f
		$(F77) $(FFLAGS) -c evalF.f -o $@

evalFaceFluxes.o:	$(FORTRAN)/evalFaceFluxes.m4
		$(M4) $(M4DIRS) $(FORTRAN)/evalFaceFluxes.m4 > evalFaceFluxes.f
		$(F77) $(FFLAGS) -c evalFaceFluxes.f -o $@

evalJv.o:	$(FORTRAN)/evalJv.m4
		$(M4) $(M4DIRS) $(FORTRAN)/evalJv.m4 > evalJv.f
		$(F77) $(FFLAGS) -c evalJv.f -o $@

evalSource.o:	$(FORTRAN)/evalSource.m4
		$(M4) $(M4DIRS) $(FORTRAN)/evalSource.m4 > evalSource.f
		$(F77) $(FFLAGS) -c evalSource.f -o $@

setbc.o:	$(FORTRAN)/setbc.m4
		$(M4) $(M4DIRS) $(FORTRAN)/setbc.m4 > setbc.f
		$(F77) $(FFLAGS) -c setbc.f -o $@

check:
		$(MAKE) check2d
		$(MAKE) check3d

check2d:	main2d
		$(OBJECT)/config/serpa-run $(TEST_NPROCS) \
			./main2d 2d.petsc.input;
		$(OBJECT)/config/serpa-run $(TEST_NPROCS) \
			./main2d 2d.kinsol.input; \

# Disable check3d from test, because it takes too long.
# It can be run using check3dx
check3d:	main3d

checktest:
		rm -rf makecheck.logfile
		$(MAKE) check >& makecheck.logfile
		cat makecheck.logfile
		$(TESTTOOLS)/testcount.sh $(TEST_NPROCS) $(NUM_TESTS) makecheck.logfile
		rm -rf makecheck.logfile
