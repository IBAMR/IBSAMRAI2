//
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/source/test/sundials/cvode-2d-neu.input $
// Package:     SAMRAI application
// Copyright:   (c) 1997-2002 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1749 $
// Modified:    $LastChangedDate: 2007-12-10 15:14:02 -0800 (Mon, 10 Dec 2007) $
// Description: Input file for SAMRAI CVODE test program
//

Main {

   init_time                = 0.0
   print_interval           = 1.0e-2
   num_print_intervals      = 10
   solution_logging         = FALSE

   max_internal_steps       = 100000
   relative_tolerance       = 1e-4
   absolute_tolerance       = 1e-4
// 0=use default
   max_order                = 0    
// stepping_method          = timestepping mode for CVODE
    NORMAL                  = 1
    ONESTEP                 = 2
   stepping_method          = NORMAL
   uses_newton              = TRUE
   uses_preconditioning     = TRUE 

   viz_dump_filename        = "rad2d"
   viz_dump_dirname         = "viz_rad2d"
   viz_dump_interval        = 0        

// Used for testing only
   correct_rhs_evals        = 927
   correct_precond_setups   = 718
   correct_precond_solves   = 512
}

CVODEModel {

   initial_value         = 0.0

   max_fac_its           = 1
   fac_tol               = 1.e-40
   max_hypre_its         = 1
   hypre_tol             = 1.e-40
   use_neumann_bcs      = TRUE 
   print_solver_info    = FALSE

   Boundary_data {
      boundary_edge_xlo {
         boundary_condition      = "DIRICHLET"
         val                     = 0.
      }
      boundary_edge_xhi {
         boundary_condition      = "DIRICHLET"
         val                     = 0.
      }
      boundary_edge_ylo {
         boundary_condition      = "NEUMANN"
         val                     = 1.  
      }
      boundary_edge_yhi {
         boundary_condition      = "DIRICHLET"
         val                     = 0.
      }
      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for a node, the condition must match that of the
      //            appropriate adjacent edge above.  This is enforced for
      //            consistency.  However, note when a REFLECT edge condition
      //            is given and the other adjacent edge has either a FLOW
      //            or REFLECT condition, the resulting node boundary values
      //            will be the same regardless of which edge is used.
      boundary_node_xlo_ylo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xhi_ylo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xlo_yhi {
         boundary_condition      = "YDIRICHLET"
      }
      boundary_node_xhi_yhi {
         boundary_condition      = "YDIRICHLET"
      }
   }

}

StandardTagAndInitialize{
   tagging_method = "REFINE_BOXES"
   RefineBoxes {
      level_0  = [ (0,0) , (9,4) ]
      level_1  = [ (0,0) , (19,4) ]
      level_2  = [ (0,0) , (39,4) ]
   }
}

TimerManager {
   timer_list = "apps::main::*" 
}

Geometry {
   domain_boxes  = [ (0,0) , (9,9) ]
   x_lo          = 0.e0 , 0.e0  // lower end of computational domain.
   x_up          = 5.e0 , 5.e0  // upper end of computational domain.
}

GriddingAlgorithm {
   max_levels              = 2 // Maximum number of levels in hierarchy.

// Note: For the following regridding information, data is required for each
//       potential in the patch hierarchy; i.e., levels 0 thru max_levels-1.
//       If more data values than needed are given, only the number required
//       will be read in.  If fewer values are given, an error will result.
//
// Specify coarsening ratios for each level 1 through max_levels-1
   ratio_to_coarser {         // vector ratio to next coarser level
      level_1               = 2 , 2 
      level_2               = 2 , 2
      level_3               = 2 , 2
   }

   largest_patch_size {
      level_0 = 20,20
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 1,1
      // all finer levels will use same values as level_0...
   }

   efficiency_tolerance     = 0.70e0   // min % of tag cells in new patch level
   combine_efficiency       = 0.85e0   // chop box if sum of volumes of smaller
                                       // boxes < efficiency * vol of large box
}

LoadBalancer {
//   processors         = 1 , 1
   use_spatial_bin_pack = TRUE
}

