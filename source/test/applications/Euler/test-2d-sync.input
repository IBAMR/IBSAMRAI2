//
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/source/test/applications/Euler/test-2d-sync.input $
// Package:     SAMRAI application
// Copyright:   (c) 1997-2008 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 2292 $
// Modified:    $LastChangedDate: 2008-07-11 11:31:57 -0700 (Fri, 11 Jul 2008) $
// Description: Input file for SAMRAI Euler 2d test problem
//

GlobalInputs {
   call_abort_in_serial_instead_of_exit = FALSE
}

AutoTester {
   test_fluxes = FALSE
   test_iter_num = 10
   correct_result =  0.00491625520151, 0.000664890679272, 0.0000729562576369
   output_correct = FALSE 

   write_patch_boxes = FALSE
   read_patch_boxes = TRUE 
   test_patch_boxes_at_steps = 0, 5, 10  // 0 checks initial data
   test_patch_boxes_filename = "test-2d-sync.boxes"
   simplify_test_boxes = TRUE
}

Euler {
   gamma            = 1.4      // gamma = Ratio of specific heats

   godunov_order    = 4        // order of Goduov slopes (1, 2, or 4)

   riemann_solve        = "APPROX_RIEM_SOLVE"
//   riemann_solve        = "EXACT_RIEM_SOLVE"
//   riemann_solve        = "HLLC_RIEM_SOLVE"

   data_problem         = "STEP"

   Initial_data {
      front_position = 0.0
      interval_0 {
         density         = 1.4
         velocity        = 3.0 , 0.0
         pressure        = 1.0
      }
      interval_1 {
         density         = 1.4
         velocity        = 3.0 , 0.0
         pressure        = 1.0
      }
   }

   Refinement_data {
      refine_criteria = "PRESSURE_GRADIENT", "PRESSURE_SHOCK"
 
      PRESSURE_GRADIENT {
         grad_tol = 20.0
      }
 
      PRESSURE_SHOCK {
         shock_tol = 10.0
         shock_onset = 0.90
      }
   }

   // valid boundary_condition values are "FLOW", "REFLECT", "DIRICHLET"
   Boundary_data {
      boundary_edge_xlo {
         boundary_condition      = "FLOW"
      }
      boundary_edge_xhi {
         boundary_condition      = "REFLECT"
      }
      boundary_edge_ylo {
         boundary_condition      = "REFLECT"
      }
      boundary_edge_yhi {
         boundary_condition      = "REFLECT"
      }

      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for a node, the condition must match that of the
      //            appropriate adjacent edge above.  This is enforced for
      //            consistency.  However, note when a REFLECT edge condition
      //            is given and the other adjacent edge has either a FLOW
      //            or REFLECT condition, the resulting node boundary values
      //            will be the same regardless of which edge is used.
      boundary_node_xlo_ylo {
         boundary_condition      = "YREFLECT"
      }
      boundary_node_xhi_ylo {
         boundary_condition      = "YREFLECT"
      }
      boundary_node_xlo_yhi {
         boundary_condition      = "YREFLECT"
      }
      boundary_node_xhi_yhi {
         boundary_condition      = "YREFLECT"
      }
   }
}

Main {
// log file parameters 
   log_file_name    = "test-2d-sync.log"
   log_all_nodes    = TRUE

// visualization dump parameters
   viz_dump_interval     = 0         // zero to turn off
   viz_dump_dirname     = "viz-test-2d-sync"
   viz_dump_filename    = "step2d"

// restart dump parameters
   restart_interval       = 1         // zero to turn off
   restart_write_dirname  = "restart-test-2d-sync"

   plotting_interval = 0

   timestepping = "SYNCHRONIZED"
}

TimerManager{
   print_exclusive      = TRUE   // output exclusive time 
   timer_list               = "apps::main::*",
                              "apps::Euler::*",
                              "algs::GriddingAlgorithm::*",
                              "algs::HyperbolicLevelIntegrator::*"
}

CartesianGeometry {
   domain_boxes = [ (0,0) , (9,19) ],
                  [ (10,4) , (49,19) ]
   x_lo         = 0.e0 , 0.e0   // lower end of computational domain.
   x_up         = 2.5e0 , 1.e0  // upper end of computational domain.
}

StandardTagAndInitialize{    
   tagging_method = "GRADIENT_DETECTOR" 
}

GriddingAlgorithm {
   max_levels = 5         // Maximum number of levels in hierarchy.

   ratio_to_coarser {              // vector ratio to next coarser level
      level_1            = 2 , 2
      level_2            = 2 , 2
      level_3            = 2 , 2
      level_4            = 2 , 2
   }

   largest_patch_size {
      level_0 = 32 , 32
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 8 , 8
      level_1 = 8 , 8
      level_2 = 8 , 8
      level_3 = 12 , 12
   }

   efficiency_tolerance = 0.75e0   // min % of tag cells in new patch level
   combine_efficiency   = 0.85e0   // chop box if sum of volumes of smaller
                                   // boxes < efficiency * vol of large box

   allow_patches_smaller_than_ghostwidth = TRUE
   allow_patches_smaller_than_minimum_size_to_prevent_overlaps = TRUE
}

HyperbolicLevelIntegrator {
   cfl                      = 0.9e0    // max cfl factor used in problem
   cfl_init                 = 0.1e0    // initial cfl factor
   lag_dt_computation       = TRUE
   use_ghosts_to_compute_dt = TRUE
}

TimeRefinementIntegrator {
   start_time            = 0.e0     // initial simulation time
   end_time              = 100.e0    // final simulation time
   grow_dt               = 1.1e0    // growth factor for timesteps
   max_integrator_steps  = 10      // max number of simulation timesteps
   regrid_interval       = 2
}

LoadBalancer {
// using default uniform load balance configuration (see mesh_LoadBalancerX.h.sed)
}
