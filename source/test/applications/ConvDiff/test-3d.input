// 
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/source/test/applications/ConvDiff/test-3d.input $
// Package:     SAMRAI application
// Copyright:   (c) 1997-2008 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1917 $
// Modified:    $LastChangedDate: 2008-01-25 13:28:01 -0800 (Fri, 25 Jan 2008) $
// Description: Advecting sphere input for SAMRAI ConvDiff example problem
//

GlobalInputs {
   call_abort_in_serial_instead_of_exit = FALSE
}

AutoTester {
   test_iter_num = 10
   correct_result = 0.625, 0.0625
   output_correct = FALSE

   write_patch_boxes = FALSE
   read_patch_boxes = TRUE 
   test_patch_boxes_at_steps = 0, 5, 10  // 0 checks initial data
   test_patch_boxes_filename = "test-3d.boxes"
   simplify_test_boxes = TRUE
}

ConvDiff {
   convection_coeff =  4.0e0 , 2.0e0 , 2.0e0 // vector [NDIM]
   diffusion_coeff   = 0.5       // scalar
   source_coeff      = 0.0       // scalar

   cfl               = 0.5
   cell_tagging_tolerance = 20.0  // vector [NEQU]

   data_problem      = "SPHERE"

   Initial_data {
      radius            = 2.9
      center            = 5.5, 5.5, 5.5    // vector [NDIM]

      val_inside     = 80.0           // vector [NEQU]
      val_outside    = 10.            // vector [NEQU]
   }

  Boundary_data {
      boundary_face_xlo {
         boundary_condition      = "DIRICHLET"
         val                     = 10.
      }
      boundary_face_xhi {
         boundary_condition      = "DIRICHLET"
         val                     = 10.
      }
      boundary_face_ylo {
         boundary_condition      = "DIRICHLET"
         val                     = 10.
      }
      boundary_face_yhi {
         boundary_condition      = "DIRICHLET"
         val                     = 10.
      }
      boundary_face_zlo {
         boundary_condition      = "DIRICHLET"
         val                     = 100.
      }
      boundary_face_zhi {
         boundary_condition      = "DIRICHLET"
         val                     = 10.
      }

      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for an edge, the condition must match that of the
      //            appropriate adjacent face above.  This is enforced for
      //            consistency.  However, note when a REFLECT face condition
      //            is given and the other adjacent face has either a FLOW
      //            or REFLECT condition, the resulting edge boundary values
      //            will be the same regardless of which face is used.

      boundary_edge_ylo_zlo { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZDIRICHLET"
      }
      boundary_edge_yhi_zlo { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZDIRICHLET"
      }
      boundary_edge_ylo_zhi { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZDIRICHLET"
      }
      boundary_edge_yhi_zhi { // XFLOW, XREFLECT, XDIRICHLET not allowed
         boundary_condition      = "ZDIRICHLET"
      }
      boundary_edge_xlo_zlo { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XDIRICHLET"
      }
      boundary_edge_xlo_zhi { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XDIRICHLET"
      }
      boundary_edge_xhi_zlo { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XDIRICHLET"
      }
      boundary_edge_xhi_zhi { // YFLOW, YREFLECT, YDIRICHLET not allowed
         boundary_condition      = "XDIRICHLET"
      }
      boundary_edge_xlo_ylo { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YDIRICHLET"
      }
      boundary_edge_xhi_ylo { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YDIRICHLET"
      }
      boundary_edge_xlo_yhi { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YDIRICHLET"
      }
      boundary_edge_xhi_yhi { // ZFLOW, ZREFLECT, ZDIRICHLET not allowed
         boundary_condition      = "YDIRICHLET"
      }

      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for a node, the condition must match that of the
      //            appropriate adjacent face above.  This is enforced for
      //            consistency.  However, note when a REFLECT face condition
      //            is given and the other adjacent faces have either FLOW
      //            or REFLECT conditions, the resulting node boundary values
      //            will be the same regardless of which face is used.

      boundary_node_xlo_ylo_zlo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xhi_ylo_zlo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xlo_yhi_zlo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xhi_yhi_zlo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xlo_ylo_zhi {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xhi_ylo_zhi {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xlo_yhi_zhi {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xhi_yhi_zhi {
         boundary_condition      = "XDIRICHLET"
      }

   }

}

Main {
// log file parameters 
   log_file_name    = "test-3d.log"
   log_all_nodes    = TRUE

// visualization dump parameters
   viz_dump_interval     = 0         // zero to turn off
   viz_dump_dirname     = "viz_test-3d"
   viz_dump_filename    = "sphere3d"

// restart dump parameters
   restart_interval       = 5         // zero to turn off
   restart_write_dirname  = "restart-test-3d"

}

MainRestartData{
   max_timesteps       = 10
   start_time          = 0.
   end_time            = 100.
   regrid_step         = 3
   tag_buffer          = 2
}

CartesianGeometry{
   domain_boxes	= [ (0,0,0) , (14,9,9) ]

   x_lo = 0.e0 , 0.e0 , 0.e0    // lower end of computational domain.
   x_up = 30.e0 , 20.e0 , 20.e0 // upper end of computational domain.
}

GriddingAlgorithm{
   max_levels = 3         // Maximum number of levels in hierarchy.

// Note: For the following regridding information, data is required for each
//       potential in the patch hierarchy; i.e., levels 0 thru max_levels-1.
//       If more data values than needed are given, only the number required
//       will be read in.  If fewer values are given, an error will result.
//
// Specify coarsening ratios for each level 1 through max_levels-1

   ratio_to_coarser {      // vector ratio to next coarser level
      level_1 = 2 , 2 , 2
      level_2 = 2 , 2 , 2
      level_3 = 2 , 2 , 2
   }

   largest_patch_size {
      level_0 = 40 , 40 , 40
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 9 , 9 , 9 
      // all finer levels will use same values as level_0...
   }

   efficiency_tolerance    = 0.85e0   // min % of tag cells in new patch level
   combine_efficiency      = 0.95e0   // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}

MethodOfLinesIntegrator{
   order              = 2
   alpha              = 0.5 , 1.0
}

LoadBalancer {
// using default uniform load balance configuration (see mesh_LoadBalancerX.h.sed)
}
