// 
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/source/test/applications/ConvDiff/test-2d.input $
// Package:     SAMRAI application
// Copyright:   (c) 1997-2008 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1917 $
// Modified:    $LastChangedDate: 2008-01-25 13:28:01 -0800 (Fri, 25 Jan 2008) $
// Description: Advecting sphere input for SAMRAI ConvDiff example problem
//

GlobalInputs {
   call_abort_in_serial_instead_of_exit = FALSE
}

AutoTester {
   test_iter_num = 10
   correct_result = 0.0048828125,  0.00048828125
   output_correct = FALSE

   write_patch_boxes = FALSE
   read_patch_boxes = TRUE 
   test_patch_boxes_at_steps = 0, 5, 10  // 0 checks initial data
   test_patch_boxes_filename = "test-2d.boxes"
   simplify_test_boxes = TRUE
}

ConvDiff {
   convection_coeff  = 40.0, 20.0  // vector [NDIM]
   diffusion_coeff   = 0.1       // scalar
   source_coeff      = 0.0       // scalar

   cfl               = 0.5
   cell_tagging_tolerance = 20.0  // vector [NEQU] 

   data_problem      = "SPHERE" 

   Initial_data {
      radius            = 2.9   
      center            = 5.5, 5.5    // vector [NDIM]

      val_inside     = 80.0          // vector [NEQU]
      val_outside    = 10.            // vector [NEQU]
   }

   Boundary_data {
      boundary_edge_xlo {
         boundary_condition      = "DIRICHLET"
         val                     = 10.
      }
      boundary_edge_xhi {
         boundary_condition      = "DIRICHLET"
         val                     = 10.
      }
      boundary_edge_ylo {
         boundary_condition      = "DIRICHLET"
         val                     = 100.
      }
      boundary_edge_yhi {
         boundary_condition      = "DIRICHLET"
         val                     = 10.
      }
      // IMPORTANT: If a *REFLECT, *DIRICHLET, or *FLOW condition is given
      //            for a node, the condition must match that of the
      //            appropriate adjacent edge above.  This is enforced for
      //            consistency.  However, note when a REFLECT edge condition
      //            is given and the other adjacent edge has either a FLOW
      //            or REFLECT condition, the resulting node boundary values
      //            will be the same regardless of which edge is used.
      boundary_node_xlo_ylo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xhi_ylo {
         boundary_condition      = "XDIRICHLET"
      }
      boundary_node_xlo_yhi {
         boundary_condition      = "YDIRICHLET"
      }
      boundary_node_xhi_yhi {
         boundary_condition      = "YDIRICHLET"
      }
   }

}

Main {
// log file parameters 
   log_file_name    = "test-2d.log"
   log_all_nodes    = TRUE

// visualization dump parameters
   viz_dump_interval     = 0         // zero to turn off
   viz_dump_dirname     = "viz_test-2d"
   viz_dump_filename    = "sphere2d"

// restart dump parameters
   restart_interval       = 5         // zero to turn off
   restart_write_dirname  = "restart-test-2d"

   plotting_interval = 0              // zero to turn off
}

MainRestartData{
   max_timesteps       = 10 
   start_time          = 0.
   end_time            = 100.
   regrid_step         = 3
   tag_buffer          = 2
}


CartesianGeometry{
   domain_boxes	= [(0,0),(59,39)]
   x_lo = 0.e0 , 0.e0   // lower end of computational domain.
   x_up = 30.e0 , 20.e0   // upper end of computational domain.
//   periodic_dimension = 1, 0
}

GriddingAlgorithm{
   max_levels = 3         // Maximum number of levels in hierarchy.

   ratio_to_coarser {      // vector ratio to next coarser level
      level_1 = 4 , 4
      level_2 = 4 , 4
      level_3 = 4 , 4
   }

   largest_patch_size {
      level_0 = 48 , 48
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 8 , 8 
      // all finer levels will use same values as level_0...
   }

   efficiency_tolerance    = 0.70e0   // min % of tag cells in new patch level
   combine_efficiency      = 0.85e0   // chop box if sum of volumes of smaller
                                      // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "GRADIENT_DETECTOR"
}

MethodOfLinesIntegrator{
   order              = 2
   alpha              = 0.5 , 1.0
}

LoadBalancer {
// using default uniform load balance configuration (see mesh_LoadBalancerX.h.sed)
}
