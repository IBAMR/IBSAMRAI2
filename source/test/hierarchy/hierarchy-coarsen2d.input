//
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/source/test/hierarchy/hierarchy-coarsen2d.input $
// Package:     SAMRAI tests
// Copyright:   (c) 1997-2008 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1917 $
// Modified:    $LastChangedDate: 2008-01-25 13:28:01 -0800 (Fri, 25 Jan 2008) $
// Description: input file for testing patch hierarchy coarsening
//

GlobalInputs {
   call_abort_in_serial_instead_of_exit = FALSE
}

Main {
//
// Log file information
//
    log_file_name  = "hierarchy-coarsen2d-test.log"
    log_all_nodes  = TRUE
}

HierarchyTest {

  do_refine_test  = FALSE
  do_coarsen_test = TRUE

  ratio = 2,2

}

CartesianGridGeometry {
   domain_boxes = [ (0,0) , (31,23) ]
   x_lo         = 0.e0 , 0.e0    // lower end of computational domain.
   x_up         = 1.e0 , 1.e0    // upper end of computational domain.
}

GriddingAlgorithm {
   max_levels              = 2 // Maximum number of levels in hierarchy.

// Note: For the following regridding information, data is required for each
//       potential in the patch hierarchy; i.e., levels 0 thru max_levels-1.
//       If more data values than needed are given, only the number required
//       will be read in.  If fewer values are given, an error will result.
//
// Specify coarsening ratios for each level 1 through max_levels-1
   ratio_to_coarser {         // vector ratio to next coarser level
      level_1               =  2 , 2
   }

   largest_patch_size {
      level_0 = 40, 40
      // all finer levels will use same values as level_0...
   }

   smallest_patch_size {
      level_0 = 2, 2
      // all finer levels will use same values as level_0...
   }

   efficiency_tolerance     = 0.70e0   // min % of tag cells in new patch level
   combine_efficiency       = 0.85e0   // chop box if sum of volumes of smaller
                                       // boxes < efficiency * vol of large box
}

StandardTagAndInitialize {
   tagging_method = "REFINE_BOXES"

   RefineBoxes {
      level_0 = [ (0,16) , (11,23) ],
                [ (16,0) , (31,7) ],
                [ (24,8) , (31,15) ]
   }

}

LoadBalancer {
// using default uniform load balance configuration (see mesh_LoadBalancerX.h.sed)
}
