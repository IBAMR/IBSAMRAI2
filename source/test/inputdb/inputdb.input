//
// File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/source/test/inputdb/inputdb.input $
// Package:     SAMRAI input database testing
// Copyright:   (c) 1997-2008 Lawrence Livermore National Security, LLC
// Revision:    $LastChangedRevision: 1917 $
// Modified:    $LastChangedDate: 2008-01-25 13:28:01 -0800 (Fri, 25 Jan 2008) $
// Description: Input file for SAMRAI input database test driver.
//

/*
 * This sample input file checks input conditions.  All entries should
 * be valid.
 */

GlobalInputs {
   call_abort_in_serial_instead_of_exit = FALSE
}

PrimitiveTypes {
   i0  = 1              // integer
   f0  = 1.0            // float
   d0  = 1.0            // double
   b0  = TRUE           // bool
   c0  = (1.0,1.0)      // complex
   s0  = "a string"     // string
   box0 = [(0,0),(9,9)] // box
}

SmartArrays {
   i1  = 1, 1, 1, 1, 1  
   f1  = 1.0, 1.0, 1.0, 1.0, 1.0  
   d1  = 1.0, 1.0, 1.0, 1.0, 1.0  
   b1  = TRUE, TRUE, TRUE, TRUE, TRUE         
   c1  = (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0)
   s1  = "a string", "a string", "a string", "a string", "a string"
   box1 = [(0,0),(9,9)], 
          [(0,0),(9,9)],  
          [(0,0),(9,9)],  
          [(0,0),(9,9)], 
          [(0,0),(9,9)] 
}

BasicArrays {
   i2  = 1, 1, 1, 1, 1  
   f2  = 1.0, 1.0, 1.0, 1.0, 1.0  
   d2  = 1.0, 1.0, 1.0, 1.0, 1.0  
   b2  = TRUE, TRUE, TRUE, TRUE, TRUE         
   c2  = (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0), (1.0,1.0)
   s2  = "a string", "a string", "a string", "a string", "a string"
   box2 = [(0,0),(9,9)], 
          [(0,0),(9,9)],  
          [(0,0),(9,9)],  
          [(0,0),(9,9)], 
          [(0,0),(9,9)] 
}

WithDefaultTypes {

}

/*
 * The following are not used by the test application but demonstrate 
 * other capabilities of the SAMRAI input database parser.  The parser 
 * supports a simple expression grammar.  All arithmetic operations work 
 * on integer, double, and complex numbers.  Numbers will be promoted if 
 * necessary.
 */

ExpressionGrammar {
   bool  = TRUE
   arg1  = 1.1
   arg2  = 2.2
   array = arg1, arg2

   a = arg1			// lookup variable
   b = array[1]			// array access
   c = (arg1)			// grouping of expressions
   d = (bool ? arg1 : arg2)	// C-style ?: if-then-else expressions
   e = !bool			// logical not for booleans
   f = e || bool		// logical or for booleans
   g = e && bool		// logical and for booleans
   h = e == bool		// equality comparison for all types
   i = "hello" != "world"	// equality comparison for all types
   j = 1 <  arg1		// less than comparison for numbers
   k = 1 >  arg1		// greater than comparison for numbers
   l = 1 <= arg1		// less equal comparison for numbers
   m = 1 >= arg1		// greater equal comparison for numbers
   n = arg1 + arg2		// addition for ints, doubles, complex
   o = arg1 - arg2		// subtraction for ints, doubles, complex
   p = arg1 * arg2		// multiplication for ints, doubles, complex
   q = arg1 / arg2		// division for ints, doubles, complex
   r = arg1 ^ arg2		// exponentiation for ints, doubles, complex
   s = -arg1			// negation for ints, doubles, complex
}

/*
 * The standard posix functions for doubles are supported, as well as the
 * standard ANSI/ISO functions for complex numbers.  Doubles may also be
 * cast to integers via int().
 */

Functions {
   double  = 0.7
   complex = (double, 1.0)

   ii = int(double)

   a = abs(double)
   b = abs(complex)
   c = acos(double)
   d = asin(double)
   e = atan(double)
   f = ceil(double)
   g = conj(complex)
   h = cos(double)
   i = cos(complex)
   j = cosh(double)
   k = cosh(complex)
   l = exp(double)
   m = exp(complex)
   n = fabs(double)
   o = floor(double)
   p = imag(complex)
   q = log10(double)
   r = log(double)
   s = log(complex)
   t = real(complex)
   u = sin(double)
   v = sin(complex)
   w = sinh(double)
   x = sinh(complex)
   y = sqrt(double)
   z = sqrt(complex)

   aa = tan(double)
}

/*
 * Just for fun, let's try some complex expressions.
 */

ComplexExpressions {
   PI    = 4*atan(1.0)
   PROCS = 10000
   box   = [(0,0),(PROCS*20,PROCS*20)]
   asci  = (PROCS >= 5000 ? "happy" : "sad")
}
