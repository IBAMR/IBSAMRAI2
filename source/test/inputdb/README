File:        $URL: file:///usr/casc/samrai/repository/SAMRAI/tags/v-2-4-4/source/test/inputdb/README $
Package:     SAMRAI tests
Copyright:   (c) 1997-2008 Lawrence Livermore National Security, LLC
Revision:    $LastChangedRevision: 1917 $
Modified:    $LastChangedDate: 2008-01-25 13:28:01 -0800 (Fri, 25 Jan 2008) $
Description: README file for input database tests.

The inputdb program tests the reading of input files into the input database.
Several sample input files are available within this directory.  

Compilation:
             make

Execution:
             ./inputdb <list of input files separated by spaces>

Output:
             Input Database is dumped to stdout.


==============================================================================
General InputManager and InputDatabase Usage
==============================================================================

Required headers:
   InputDatabase.h
   InputManager.h

Input File:
   Supported Features -
   *support types: 
       bool: TRUE,FALSE
       box: [(lower coord),(upper coord)]
       char: '<character>'
       complex: ( real , imag )
       double, float:  standard representation for double/float.  A period
                       may not start the double/float( use 0.8 instead of .8 ).
       integer: standard integer representation
       string: "<string>"
       vectors, arrays, lists: other types separated by commas
   *nesting of databases 
   *simple expression grammar for keyword assignment
   *inclusion of other input files using the standard C/C++ #include grammar
   *use of standard C/C++ comments 

   An example input file might look like the following -

#include "another_input_file"

Database_name {

   keyword1 = value1
   keyword2 = value2
   sub_database1 {
      keyword3 = value3
      keyword4 = value4
   }
}

Reading from an input database:
   1) Create an InputDatabase object (the name for this database is not 
      important).
   2) Parse the input file using the parseInputFile() in the InputManager
      class.  Since the InputManager is a singleton object, a pointer
      to it can be obtained by using the static function 
      InputManager::getManager().
   3) Retrive data from the InputDatabase using the accessor methods
      provided by the Database.h interface.

   A code snippet demonstrating InputDatabase use might look like -

// Create input database object
Pointer<InputDatabase> input_db = new InputDatabase("input_db");

// Parse input file
InputManager::getManager()->parseInputFile("input_file",input_db);

// Access database
int int_value = input_db->getInteger("integer_key");
double double_value = input_db->getDouble("double_key");
Pointer<Database> sub_database = input_db->getDatabase("sub_database_name");
char char_value  = sub_database->getChar("char_key");
float float_value = input_db->getFloat("float_key");


   More examples of input database usage can be found in main.C for 
   the sample applications.  These applications can be found in the
   SAMRAI/source/applications/ directory.
